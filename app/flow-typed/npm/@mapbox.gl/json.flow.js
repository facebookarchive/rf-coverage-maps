/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 * @flow
 */

declare module "@deck.gl/json/utils/assert" {
  declare export default function assert(
    condition: any,
    message?: string
  ): void;
}

declare module "@deck.gl/json/utils/get" {
  /**
   * Access properties of nested containers using dot-path notation
   * Returns `undefined` if any container is not valid, instead of throwing
   * @param {Object} container - container that supports get
   * @param {String | *} compositeKey - key to access, can be '.'-separated string
   * @return {*} - value in the final key of the nested container, or `undefined`
   */
  declare export function get(container: any, compositeKey: any): any;
}

declare module "@deck.gl/json/helpers/parse-expression-string" {
  declare export default function parseExpressionString(
    propValue: any,
    configuration: any
  ): any;
}

declare module "@deck.gl/json/syntactic-sugar" {
  declare var FUNCTION_IDENTIFIER: "@@=";
  declare var CONSTANT_IDENTIFIER: "@@#";
  declare var TYPE_KEY: "@@type";
  declare export { FUNCTION_IDENTIFIER, CONSTANT_IDENTIFIER, TYPE_KEY };
}

declare module "@deck.gl/json/json-configuration" {
  declare export default class JSONConfiguration {
    constructor(...configurations: any[]): this;
    merge(configuration: any): void;
    validate(configuration: any): boolean;
  }
}

declare module "@deck.gl/json/helpers/convert-functions" {
  declare export default function convertFunctions(
    props: any,
    configuration: any
  ): { ... };
}

declare module "@deck.gl/json/helpers/instantiate-class" {
  declare export function instantiateClass(
    type: any,
    props: any,
    configuration: any
  ): any;
}

declare module "@deck.gl/json/helpers/parse-json" {
  declare export default function parseJSON(json: any): any;
}

declare module "@deck.gl/json/json-converter" {
  declare export default class JSONConverter {
    constructor(props: any): this;
    finalize(): void;
    setProps(props: any): void;
    mergeConfiguration(config: any): void;
    convert(json: any): any;
    convertJson(json: any): any;
  }
}

declare module "@deck.gl/json/utils/shallow-equal-objects" {
  declare export function shallowEqualObjects(a: any, b: any): boolean;
}

declare module "@deck.gl/json" {
  declare export { default as JSONConverter } from "@deck.gl/json/json-converter";

  declare export { default as JSONConfiguration } from "@deck.gl/json/json-configuration";

  declare export { default as _convertFunctions } from "@deck.gl/json/helpers/convert-functions";

  declare export { default as _parseExpressionString } from "@deck.gl/json/helpers/parse-expression-string";

  declare export { shallowEqualObjects as _shallowEqualObjects } from "@deck.gl/json/utils/shallow-equal-objects";
}
