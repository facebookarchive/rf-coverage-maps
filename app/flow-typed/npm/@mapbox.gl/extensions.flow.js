/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 * @flow
 */

declare module "@deck.gl/extensions/brushing/shader-module" {
  declare var _default: {
    name: string,
    dependencies: any[],
    vs: string,
    fs: string,
    inject: {
      "vs:DECKGL_FILTER_GL_POSITION": string,
      "fs:DECKGL_FILTER_COLOR": string,
      ...
    },
    getUniforms: (
      opts: any
    ) =>
      | {
          brushing_enabled?: void,
          brushing_radius?: void,
          brushing_target?: void,
          brushing_mousePos?: void,
          ...
        }
      | {
          brushing_enabled: boolean,
          brushing_radius: any,
          brushing_target: any,
          brushing_mousePos: any,
          ...
        },
    ...
  };
  declare export default typeof _default;
}

declare module "@deck.gl/extensions/brushing/brushing" {
  import type { LayerExtension } from "@deck.gl/core";

  declare export default class BrushingExtension mixins LayerExtension {
    getShaders(
      extension: any
    ): {
      modules: {
        name: string,
        dependencies: any[],
        vs: string,
        fs: string,
        inject: {
          "vs:DECKGL_FILTER_GL_POSITION": string,
          "fs:DECKGL_FILTER_COLOR": string,
          ...
        },
        getUniforms: (
          opts: any
        ) =>
          | {
              brushing_enabled?: void,
              brushing_radius?: void,
              brushing_target?: void,
              brushing_mousePos?: void,
              ...
            }
          | {
              brushing_enabled: boolean,
              brushing_radius: any,
              brushing_target: any,
              brushing_mousePos: any,
              ...
            },
        ...
      }[],
      ...
    };
    initializeState(context: any, extension: any): void;
    finalizeState(extension: any): void;
    useConstantTargetPositions(attribute: any): void;
  }
}

declare module "@deck.gl/extensions/data-filter/shader-module" {
  declare export var shaderModule: {
    name: string,
    vs: string,
    fs: string,
    inject: {
      "vs:#main-start": string,
      "vs:DECKGL_FILTER_SIZE": string,
      "fs:DECKGL_FILTER_COLOR": string,
      ...
    },
    getUniforms: (opts: any) => { ... },
    ...
  };
  declare export var shaderModule64: {
    name: string,
    vs: string,
    fs: string,
    inject: {
      "vs:#main-start": string,
      "vs:DECKGL_FILTER_SIZE": string,
      "fs:DECKGL_FILTER_COLOR": string,
      ...
    },
    getUniforms: (opts: any) => { ... },
    ...
  };
}

declare module "@deck.gl/extensions/data-filter/data-filter" {
  import type { LayerExtension } from "@deck.gl/core";

  declare export default class DataFilterExtension mixins LayerExtension {
    constructor(x?: {
      filterSize?: number,
      fp64?: boolean,
      ...
    }): this;
    getShaders(
      extension: any
    ): {
      modules: {
        name: string,
        vs: string,
        fs: string,
        inject: {
          "vs:#main-start": string,
          "vs:DECKGL_FILTER_SIZE": string,
          "fs:DECKGL_FILTER_COLOR": string,
          ...
        },
        getUniforms: (opts: any) => { ... },
        ...
      }[],
      defines: {
        DATAFILTER_TYPE: any,
        DATAFILTER_DOUBLE: boolean,
        ...
      },
      ...
    };
    initializeState(context: any, extension: any): void;
  }
}

declare module "@deck.gl/extensions/fp64/project64.glsl" {
  declare var _default: string;
  declare export default typeof _default;
}

declare module "@deck.gl/extensions/fp64/project64" {
  declare var _default: {
    name: string,
    dependencies: any[],
    vs: string,
    getUniforms: typeof getUniforms,
    ...
  };
  declare export default typeof _default;

  declare function getUniforms(opts?: { ... }): any;
}

declare module "@deck.gl/extensions/fp64/fp64" {
  import type { LayerExtension } from "@deck.gl/core";

  declare export default class Fp64Extension mixins LayerExtension {
    getShaders(
      opts: any
    ): {
      modules: {
        name: string,
        dependencies: any[],
        vs: string,
        getUniforms: (opts?: { ... }) => any,
        ...
      }[],
      ...
    };
  }
}

declare module "@deck.gl/extensions/path-style/shaders.glsl" {
  declare export var dashShaders: {
    inject: {
      "vs:#decl": string,
      "vs:#main-end": string,
      "fs:#decl": string,
      "fs:#main-start": string,
      ...
    },
    ...
  };
  declare export var offsetShaders: {
    inject: {
      "vs:#decl": string,
      "vs:DECKGL_FILTER_SIZE": string,
      "vCornerOffset = offsetVec;": string,
      "fs:#main-start": string,
      ...
    },
    ...
  };
}

declare module "@deck.gl/extensions/path-style/path-style" {
  import type { LayerExtension } from "@deck.gl/core";

  declare export default class PathStyleExtension mixins LayerExtension {
    constructor(x?: {
      dash?: boolean,
      offset?: boolean,
      ...
    }): this;
    isEnabled(layer: any): any;
    getShaders(extension: any): { ... };
    initializeState(context: any, extension: any): void;
    updateState(params: any, extension: any): void;
  }
}

declare module "@deck.gl/extensions" {
  declare export { default as BrushingExtension } from "@deck.gl/extensions/brushing/brushing";

  declare export { default as DataFilterExtension } from "@deck.gl/extensions/data-filter/data-filter";

  declare export { default as Fp64Extension } from "@deck.gl/extensions/fp64/fp64";

  declare export { default as PathStyleExtension } from "@deck.gl/extensions/path-style/path-style";

  declare export { default as project64 } from "@deck.gl/extensions/fp64/project64";
}
