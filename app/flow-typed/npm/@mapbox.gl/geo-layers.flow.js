/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 * @flow
 */

declare module "@deck.gl/geo-layers/great-circle-layer/great-circle-vertex.glsl" {
  declare var _default: string;
  declare export default typeof _default;
}

declare module "@deck.gl/geo-layers/great-circle-layer/great-circle-layer" {
  import type { ArcLayerProps } from "@deck.gl/layers/arc-layer/arc-layer";

  declare export type GreatCircleLayerProps<D> = { ... } & ArcLayerProps<D>;

  import type { ArcLayer } from "@deck.gl/layers";

  declare export default class GreatCircleLayer<
      D,
      P: GreatCircleLayerProps<D> = GreatCircleLayerProps<D>
    >
    mixins ArcLayer<D, P> {
    getShaders(): any;
  }
}

declare module "@deck.gl/geo-layers/s2-layer/s2-geometry" {
  declare export function IJToST(ij: any, order: any, offsets: any): number[];

  declare export function STToUV(st: any): number[];

  declare export function FaceUVToXYZ(face: any, x: [any, any]): any[];

  declare export function XYZToLngLat(x: [any, any, any]): number[];

  declare export function toHilbertQuadkey(idS: any): string;

  declare export function FromHilbertQuadKey(
    hilbertQuadkey: any
  ): {
    face: number,
    ij: number[],
    level: any,
    ...
  };
}

declare module "@deck.gl/geo-layers/s2-layer/s2-utils" {
  declare export function getS2QuadKey(token: any): string;

  /**
 * Get a polygon with corner coordinates for an s2 cell
 * @param {*} cell - This can be an S2 key or token
 * @return {Array} - a simple polygon in array format: [[lng, lat], ...]
- each coordinate is an array [lng, lat]
- the polygon is closed, i.e. last coordinate is a copy of the first coordinate
 */
  declare export function getS2Polygon(token: any): Float64Array;
}

declare module "@deck.gl/geo-layers/s2-layer/s2-layer" {
  import type { CompositeLayer } from "@deck.gl/core";

  import type { CompositeLayerProps } from "@deck.gl/core/lib/composite-layer";

  declare export type S2LayerProps<D> = {
    getS2Token: (d: D) => any,
    ...
  } & CompositeLayerProps<D>;

  declare export default class S2Layer<D, P: S2LayerProps<D> = S2LayerProps<D>>
    mixins CompositeLayer<D, P> {
    constructor(props: S2LayerProps<D>): this;
    renderLayers(): any;
  }
}

declare module "@deck.gl/geo-layers/tile-layer/tile-2d-header" {
  declare export default class Tile2DHeader {
    constructor(x: {
      x: any,
      y: any,
      z: any,
      onTileLoad: any,
      onTileError: any,
      ...
    }): this;
    data: any;
    isLoaded: any;
    byteLength: any;
    loadData(getTileData: any): void;
  }
}

declare module "@deck.gl/geo-layers/tile-layer/utils" {
  declare export var urlType: {
    type: string,
    value: string,
    validate: (value: any) => boolean,
    equals: (value1: any, value2: any) => boolean,
    ...
  };
  declare export function getURLFromTemplate(
    template: any,
    properties: any
  ): any;

  declare export function tileToBoundingBox(
    viewport: any,
    x: any,
    y: any,
    z: any,
    tileSize?: number
  ):
    | {
        west: number,
        north: number,
        east: number,
        south: number,
        left?: void,
        top?: void,
        right?: void,
        bottom?: void,
        ...
      }
    | {
        left: number,
        top: number,
        right: number,
        bottom: number,
        west?: void,
        north?: void,
        east?: void,
        south?: void,
        ...
      };

  /**
   * Returns all tile indices in the current viewport. If the current zoom level is smaller
   * than minZoom, return an empty array. If the current zoom level is greater than maxZoom,
   * return tiles that are on maxZoom.
   */
  declare export function getTileIndices(
    viewport: any,
    maxZoom: any,
    minZoom: any,
    zRange: any,
    tileSize?: number
  ): any[];
}

declare module "@deck.gl/geo-layers/tile-layer/tileset-2d" {
  declare export var STRATEGY_NEVER: "never";
  declare export var STRATEGY_REPLACE: "no-overlap";
  declare export var STRATEGY_DEFAULT: "best-available";

  /**
   * Manages loading and purging of tiles data. This class caches recently visited tiles
   * and only create new tiles if they are present.
   */
  declare export default class Tileset2D {
    /**
     * Takes in a function that returns tile data, a cache size, and a max and a min zoom level.
     * Cache size defaults to 5 * number of tiles in the current viewport
     */
    constructor(opts: any): this;
    tiles: any;
    selectedTiles: any;
    isLoaded: any;
    setOptions(opts: any): void;

    /**
     * Update the cache with the given viewport and triggers callback onUpdate.
     * @param {*} viewport
     * @param {*} onUpdate
     */
    update(
      viewport: any,
      x?: {
        zRange: any,
        ...
      }
    ): any;
    getTileIndices(x: {
      viewport: any,
      maxZoom: any,
      minZoom: any,
      zRange: any,
      ...
    }): any[];
    getTileMetadata(x: {
      x: any,
      y: any,
      z: any,
      ...
    }): {
      bbox:
        | {
            west: number,
            north: number,
            east: number,
            south: number,
            left?: void,
            top?: void,
            right?: void,
            bottom?: void,
            ...
          }
        | {
            left: number,
            top: number,
            right: number,
            bottom: number,
            west?: void,
            north?: void,
            east?: void,
            south?: void,
            ...
          },
      ...
    };
    getParentIndex(tileIndex: any): any;
    updateTileStates(): boolean;
    _rebuildTree(): void;
    _updateTileStates(selectedTiles: any): void;

    /**
     * Clear tiles that are not visible when the cache is full
     */
    _resizeCache(): void;
    _getTile(
      x: {
        x: any,
        y: any,
        z: any,
        ...
      },
      create: any
    ): any;
    _getNearestAncestor(x: any, y: any, z: any): any;
  }
}

declare module "@deck.gl/geo-layers/tile-layer/tile-layer" {
  import type { CompositeLayer, Layer } from "@deck.gl/core";

  import type { LayerProps } from "@deck.gl/core/lib/layer";

  declare export type TileLayerProps<D> = {
    getTileData?: (tile: {
      x: number,
      y: number,
      z: number,
      url: string,
      bbox: any,
      ...
    }) => D[],
    tileSize?: number,
    maxZoom?: number | null,
    minZoom?: number,
    maxCacheSize?: number,
    maxCacheByteSize?: number,
    refinementStrategy?: "best-available" | "no-overlap" | "never",
    maxRequests?: number,
    extent?: [number, number, number, number],
    renderSubLayers?: (props: any) => Layer<any> | Layer<any>[],
    zRange?: [number, number],
    onViewportLoad?: (data: D[]) => void,
    onTileLoad?: (tile: D) => void,
    onTileError?: (error: Error) => void,
    ...
  } & LayerProps<D>;

  declare export default class TileLayer<
      D,
      P: TileLayerProps<D> = TileLayerProps<D>
    >
    mixins CompositeLayer<D, P> {
    constructor(props: TileLayerProps<D>): this;
    initializeState(params: any): void;
    isLoaded: any;
    shouldUpdateState(x: {
      changeFlags: any,
      ...
    }): any;
    updateState(x: {
      props: any,
      oldProps: any,
      context: any,
      changeFlags: any,
      ...
    }): void;
    _updateTileset(): void;
    _onTileLoad(tile: any): void;
    _onTileError(error: any): void;
    getTileData(tile: any): any;
    renderSubLayers(props: any): any;
    getPickingInfo(x: {
      info: any,
      sourceLayer: any,
      ...
    }): any;
    renderLayers(): any;
  }
}

declare module "@deck.gl/geo-layers/trips-layer/trips-layer" {
  import type { PathLayer } from "@deck.gl/layers";

  import type { Position } from "@deck.gl/core/utils/positions";

  import type LayerPath, {
    PathLayerProps,
    TypedArray,
  } from "@deck.gl/layers/path-layer/path-layer";

  declare export type TripsLayerProps<D> = {
    currentTime?: number,
    trailLength?: number,
    getPath?: (d: D) => Position[] | TypedArray,
    getTimestamps?: (
      d: D,
      info?: {
        data: D[],
        index: number,
        target: number[],
        ...
      }
    ) => number[],
    ...
  } & PathLayerProps<D>;

  declare export default class TripsLayer<
      D,
      P: TripsLayerProps<D> = TripsLayerProps<D>
    >
    mixins PathLayer<D, P> {
    constructor(props: TripsLayerProps<D>): this;
    getShaders(): any;
    initializeState(params?: any): void;
    draw(params: any): void;
  }
}

declare module "@deck.gl/geo-layers/h3-layers/h3-cluster-layer" {
  import type { CompositeLayer } from "@deck.gl/core";

  import type { PolygonLayerProps } from "@deck.gl/layers/polygon-layer/polygon-layer";

  declare export type H3ClusterLayerProps<D> = {
    getHexagons?: (d: D) => string[],
    ...
  } & PolygonLayerProps<D>;

  declare export default class H3ClusterLayer<D, P: H3ClusterLayerProps<D>>
    mixins CompositeLayer<D, P> {
    constructor(props: H3ClusterLayerProps<D>): this;
    updateState(x: {
      props: H3ClusterLayerProps<D>,
      oldProps: H3ClusterLayerProps<D>,
      changeFlags: any,
      ...
    }): void;
    renderLayers(): any;
  }
}

declare module "@deck.gl/geo-layers/h3-layers/h3-hexagon-layer" {
  import type { CompositeLayer } from "@deck.gl/core";

  import type { PolygonLayerProps } from "@deck.gl/layers/polygon-layer/polygon-layer";

  declare export function normalizeLongitudes(vertices: any, refLng: any): void;

  declare export function scalePolygon(
    hexId: any,
    vertices: any,
    factor: any
  ): void;

  declare export type H3HexagonLayerProps<D> = {
    highPrecision?: boolean,
    coverage?: number,
    getHexagon?: (d: D) => string,
    ...
  } & PolygonLayerProps<D>;

  /**
   * A subclass of HexagonLayer that uses H3 hexagonIds in data objects
   * rather than centroid lat/longs. The shape of each hexagon is determined
   * based on a single "center" hexagon, which can be selected by passing in
   * a center lat/lon pair. If not provided, the map center will be used.
   *
   * Also sets the `hexagonId` field in the onHover/onClick callback's info
   * objects. Since this is calculated using math, hexagonId will be present
   * even when no corresponding hexagon is in the data set. You can check
   * index !== -1 to see if picking matches an actual object.
   */
  declare export default class H3HexagonLayer<
      D,
      P: H3HexagonLayerProps<D> = H3HexagonLayerProps<D>
    >
    mixins CompositeLayer<D, P> {
    constructor(props: H3HexagonLayerProps<D>): this;
    shouldUpdateState(x: {
      changeFlags: any,
      ...
    }): any;
    updateState(x: {
      props: any,
      oldProps: any,
      changeFlags: any,
      ...
    }): void;
    _shouldUseHighPrecision(): any;
    _updateVertices(viewport: any): void;
    renderLayers(): any;
    _getForwardProps(): {
      elevationScale: any,
      extruded: any,
      coverage: any,
      wireframe: any,
      stroked: any,
      filled: any,
      lineWidthUnits: any,
      lineWidthScale: any,
      lineWidthMinPixels: any,
      lineWidthMaxPixels: any,
      material: any,
      getElevation: any,
      getFillColor: any,
      getLineColor: any,
      getLineWidth: any,
      updateTriggers: {
        getFillColor: any,
        getElevation: any,
        getLineColor: any,
        getLineWidth: any,
        ...
      },
      ...
    };
    _renderPolygonLayer(): any;
    _renderColumnLayer(): any;
  }
}

declare module "@deck.gl/geo-layers/tile-3d-layer/tile-3d-layer" {
  import type { CompositeLayer } from "@deck.gl/core";

  import type { CompositeLayerProps } from "@deck.gl/core/lib/composite-layer";

  import type { RGBAColor } from "@deck.gl/core/utils/color";

  declare export type Tile3DLayerProps<D> = {
    opacity?: number,
    pointSize?: number,
    data?: string,
    loader?: any,
    pickable?: boolean,
    getPointColor?: ((tileData: Object) => RGBAColor) | RGBAColor,
    onTilesetLoad?: (tileData: Object) => void,
    onTileLoad?: (tileHeader: Object) => void,
    onTileUnload?: (tileHeader: Object) => void,
    onTileError?: (tileHeader: Object, url: string, message: string) => void,
    ...
  } & CompositeLayerProps<D>;

  declare export default class Tile3DLayer<
      D,
      P: Tile3DLayerProps<D> = Tile3DLayerProps<D>
    >
    mixins CompositeLayer<D, P> {
    constructor(props: Tile3DLayerProps<D>): this;
    initializeState(params: any): void;
    shouldUpdateState(x: {
      changeFlags: any,
      ...
    }): any;
    updateState(x: {
      props: Tile3DLayerProps<D>,
      oldProps: Tile3DLayerProps<D>,
      changeFlags: any,
      ...
    }): void;
    getPickingInfo(x: {
      info: any,
      sourceLayer: any,
      ...
    }): any;
    _loadTileset(tilesetUrl: any): Promise<void>;
    _onTileLoad(tileHeader: any): void;
    _onTileUnload(tileHeader: any): void;
    _updateTileset(tileset3d: any): void;
    _create3DTileLayer(tileHeader: any): any;
    _createPointCloudTileLayer(tileHeader: any): any;
    _create3DModelTileLayer(tileHeader: any): any;
    _createSimpleMeshLayer(tileHeader: any): any;
    renderLayers(): any;
  }
}

declare module "@deck.gl/geo-layers/terrain-layer/terrain-layer" {
  import type { CompositeLayer } from "@deck.gl/core";

  import type { CompositeLayerProps } from "@deck.gl/core/lib/composite-layer";

  import type { RGBAColor } from "@deck.gl/core/utils/color";

  /**
   * state: {
   *    isTiled: True renders TileLayer of many SimpleMeshLayers, false renders one SimpleMeshLayer
   *    terrain: Mesh object. Only  defined when isTiled is false.
   * }
   */
  declare export type TerrainLayerProps<D> = {
    elevationData: string | string[],
    texture?: string | null,
    meshMaxError?: number,
    elevationDecoder?: {
      rScaler: number,
      gScaler: number,
      bScaler: number,
      offset: number,
      ...
    },
    bounds?: number[],
    workerUrl?: string,
    color?: RGBAColor,
    wireframe?: boolean,
    material?: any,
    ...
  } & CompositeLayerProps<D>;

  declare export default class TerrainLayer<
      D,
      P: TerrainLayerProps<D> = TerrainLayerProps<D>
    >
    mixins CompositeLayer<D, P> {
    constructor(props: TerrainLayerProps<D>): this;
    updateState(x: {
      props: TerrainLayerProps<D>,
      oldProps: TerrainLayerProps<D>,
      ...
    }): void;
    loadTerrain(x: {
      elevationData: any,
      bounds: any,
      elevationDecoder: any,
      meshMaxError: any,
      workerUrl: any,
      ...
    }): any;
    getTiledTerrainData(tile: any): Promise<[any, any]>;
    renderSubLayers(props: any): any;
    onViewportLoad(data: any): void;
    renderLayers(): any;
  }
}

declare module "@deck.gl/geo-layers/mvt-layer/clip-extension" {
  import type { LayerExtension } from "@deck.gl/core";

  declare export default class ClipExtension mixins LayerExtension {
    getShaders(
      opts: any
    ):
      | {
          modules: {
            name: string,
            vs: string,
            ...
          }[],
          inject: {
            "vs:#decl": string,
            "vs:DECKGL_FILTER_GL_POSITION": string,
            "fs:#decl": string,
            "fs:DECKGL_FILTER_COLOR": string,
            ...
          },
          ...
        }
      | {
          modules: {
            name: string,
            fs: string,
            ...
          }[],
          inject: {
            "vs:#decl": string,
            "vs:DECKGL_FILTER_GL_POSITION": string,
            "fs:#decl": string,
            "fs:DECKGL_FILTER_COLOR": string,
            ...
          },
          ...
        };
    draw(x: {
      uniforms: any,
      ...
    }): void;
  }
}

declare module "@deck.gl/geo-layers/mvt-layer/mvt-layer" {
  import type TileLayer, {
    TileLayerProps,
  } from "@deck.gl/geo-layers/tile-layer/tile-layer";

  declare export default class MVTLayer<
      D,
      P: TileLayerProps<D> = TileLayerProps<D>
    >
    mixins TileLayer<D, P> {
    getTileData(tile: any): any;
    renderSubLayers(props: any): any;
  }
}

declare module "@deck.gl/geo-layers" {
  declare export { default as GreatCircleLayer } from "@deck.gl/geo-layers/great-circle-layer/great-circle-layer";

  declare export { default as S2Layer } from "@deck.gl/geo-layers/s2-layer/s2-layer";

  declare export { default as TileLayer } from "@deck.gl/geo-layers/tile-layer/tile-layer";

  declare export { default as TripsLayer } from "@deck.gl/geo-layers/trips-layer/trips-layer";

  declare export { default as H3ClusterLayer } from "@deck.gl/geo-layers/h3-layers/h3-cluster-layer";

  declare export { default as H3HexagonLayer } from "@deck.gl/geo-layers/h3-layers/h3-hexagon-layer";

  declare export { default as Tile3DLayer } from "@deck.gl/geo-layers/tile-3d-layer/tile-3d-layer";

  declare export { default as TerrainLayer } from "@deck.gl/geo-layers/terrain-layer/terrain-layer";

  declare export { default as MVTLayer } from "@deck.gl/geo-layers/mvt-layer/mvt-layer";
}
