/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 */

declare module "@deck.gl/layers/arc-layer/arc-layer-vertex.glsl" {
  declare var _default: string;
  declare export default typeof _default;
}

declare module "@deck.gl/layers/arc-layer/arc-layer-fragment.glsl" {
  declare var _default: string;
  declare export default typeof _default;
}

declare module "@deck.gl/layers/arc-layer/arc-layer" {
  import type { LayerProps } from "@deck.gl/core/lib/layer";

  import type { RGBAColor } from "@deck.gl/core/utils/color";

  import type { Position } from "@deck.gl/core/utils/positions";

  declare export type ArcLayerProps<D> = {
    widthUnits?: string,
    widthScale?: number,
    widthMinPixels?: number,
    widthMaxPixels?: number,
    getSourcePosition?: (d: D) => Position,
    getTargetPosition?: (d: D) => Position,
    getSourceColor?: ((d: D) => RGBAColor) | RGBAColor,
    getTargetColor?: ((d: D) => RGBAColor) | RGBAColor,
    getWidth?: ((d: D) => number) | number,
    getHeight?: ((d: D) => number) | number,
    getTilt?: ((d: D) => number) | number,
    ...
  } & LayerProps<D>;

  import type { Layer } from "@deck.gl/core";

  declare export default class ArcLayer<
      D,
      P: ArcLayerProps<D> = ArcLayerProps<D>
    >
    mixins Layer<D, P> {
    getShaders(): any;
    initializeState(params: any): void;
    updateState(x: {
      props: P,
      oldProps: P,
      changeFlags: any,
      ...
    }): void;
    draw(x: {
      uniforms: any,
      ...
    }): void;
    _getModel(gl: any): any;
  }
}

declare module "@deck.gl/layers/bitmap-layer/bitmap-layer-vertex" {
  declare var _default: string;
  declare export default typeof _default;
}

declare module "@deck.gl/layers/bitmap-layer/bitmap-layer-fragment" {
  declare var _default: string;
  declare export default typeof _default;
}

declare module "@deck.gl/layers/bitmap-layer/bitmap-layer" {
  import type { Layer } from "@deck.gl/core";

  import type { LayerProps } from "@deck.gl/core/lib/layer";

  import type { RGBAColor } from "@deck.gl/core/utils/color";

  declare export type BitmapLayerProps<D> = {
    image: any,
    bounds:
      | [number, number, number, number]
      | [
          [number, number],
          [number, number],
          [number, number],
          [number, number]
        ],
    desaturate: number,
    transparentColor: RGBAColor,
    tintColor: [number, number, number],
    ...
  } & LayerProps<D>;

  declare export default class BitmapLayer<
      D,
      P: BitmapLayerProps<D> = BitmapLayerProps<D>
    >
    mixins Layer<D, P> {
    constructor(props: BitmapLayerProps<D>): this;
    getShaders(): any;
    initializeState(params: any): void;
    updateState(x: {
      props: P,
      oldProps: P,
      changeFlags: any,
      ...
    }): void;
    finalizeState(): void;
    calculatePositions(attributes: any): void;
    _getModel(gl: any): any;
    draw(opts: any): void;
    loadTexture(image: any): void;
  }
}

declare module "@deck.gl/layers/icon-layer/icon-layer-vertex.glsl" {
  declare var _default: string;
  declare export default typeof _default;
}

declare module "@deck.gl/layers/icon-layer/icon-layer-fragment.glsl" {
  declare var _default: string;
  declare export default typeof _default;
}

declare module "@deck.gl/layers/icon-layer/icon-manager" {
  /**
 * Generate coordinate mapping to retrieve icon left-top position from an icon atlas
 * @param {Array<Object>} icons list of icons, each icon requires url, width, height
 * @param {Number} buffer add buffer to the right and bottom side of the image
 * @param {Number} xOffset right position of last icon in old mapping
 * @param {Number} yOffset top position in last icon in old mapping
 * @param {Number} rowHeight rowHeight of the last icon's row
 * @param {Number} canvasWidth max width of canvas
 * @param {{[key: string]: any}} mapping old mapping
 * @returns {{
mapping: {
"/icon/1": {
url: any,
width: any,
height: any,...
},...
},
canvasHeight: {
Number: any,...
},...
}}
 */
  declare export function buildMapping(x: {
    icons: any,
    buffer: any,
    mapping?: { ... },
    xOffset?: number,
    yOffset?: number,
    rowHeight?: number,
    canvasWidth: any,
    ...
  }): {
    mapping: { ... },
    rowHeight: number,
    xOffset: number,
    yOffset: number,
    canvasWidth: any,
    canvasHeight: number,
    ...
  };

  declare export function getDiffIcons(
    data: any,
    getIcon: any,
    cachedIcons: any
  ): { ... };

  declare export default class IconManager {
    constructor(
      gl: any,
      x: {
        onUpdate?: () => void,
        ...
      }
    ): this;
    finalize(): void;
    getTexture(): any;
    getIconMapping(icon: any): any;
    setProps(x: {
      loadOptions: any,
      autoPacking: any,
      iconAtlas: any,
      iconMapping: any,
      data: any,
      getIcon: any,
      ...
    }): void;
    isLoaded: boolean;
    _updateIconAtlas(iconAtlas: any): void;
    _updateAutoPacking(data: any): void;
    _loadIcons(icons: any): void;
  }
}

declare module "@deck.gl/layers/icon-layer/icon-layer" {
  import type { Layer } from "@deck.gl/core";

  import type { LayerProps } from "@deck.gl/core/lib/layer";

  import type { Position, Position2D } from "@deck.gl/core/utils/positions";

  import typeof Texture2D from "@luma.gl/webgl/classes/texture-2d";

  import type { RGBAColor } from "@deck.gl/core/utils/color";

  declare export type IconDefinitionBase = {
    width: number;
    height: number;
    anchorX?: number;
    anchorY?: number;
    mask?: boolean;
  }
  declare export type IconDefinition = {
    x: number,
    y: number,
    ...
  } & IconDefinitionBase;

  declare export type IconMapping = {
    [key: string]: IconDefinition;
  }
  declare export type IconLayerProps<D> = {
    iconAtlas?: Texture2D | string,
    iconMapping?: IconMapping,
    sizeScale?: number,
    sizeUnits?: "meters" | "pixels",
    sizeMinPixels?: number,
    sizeMaxPixels?: number,
    billboard?: boolean,
    alphaCutoff?: number,
    getIcon?: (
      x: D
    ) =>
      | string
      | ({
          url: string,
          id?: string,
          ...
        } & IconDefinitionBase),
    getPosition?: (x: D) => Position,
    getSize?: ((x: D) => number) | number,
    getColor?: ((x: D) => RGBAColor) | RGBAColor,
    getAngle?: ((x: D) => number) | number,
    getPixelOffset?: ((x: D) => Position2D) | Position2D,
    ...
  } & LayerProps<D>;

  declare export default class IconLayer<
      D,
      P: IconLayerProps<D> = IconLayerProps<D>
    >
    mixins Layer<D, P> {
    constructor(props: P): this;
    getShaders(): any;
    initializeState(params: any): void;
    updateState(x: {
      oldProps: P,
      props: P,
      changeFlags: any,
      ...
    }): void;
    isLoaded: any;
    finalizeState(): void;
    draw(x: {
      uniforms: any,
      ...
    }): void;
    _getModel(gl: any): any;
    _onUpdate(): void;
    getInstanceOffset(icon: any): number[];
    getInstanceColorMode(icon: any): number;
    getInstanceIconFrame(icon: any): any[];
  }
}

declare module "@deck.gl/layers/line-layer/line-layer-vertex.glsl" {
  declare var _default: string;
  declare export default typeof _default;
}

declare module "@deck.gl/layers/line-layer/line-layer-fragment.glsl" {
  declare var _default: string;
  declare export default typeof _default;
}

declare module "@deck.gl/layers/line-layer/line-layer" {
  import type { Layer } from "@deck.gl/core";

  import type { LayerProps } from "@deck.gl/core/lib/layer";

  import type { RGBAColor } from "@deck.gl/core/utils/color";

  import type { Position } from "@deck.gl/core/utils/positions";

  declare export type LineLayerProps<D> = {
    widthUnits?: "meters" | "pixels",
    widthScale?: number,
    widthMinPixels?: number,
    widthMaxPixels?: number,
    getSourcePosition?: (d: D) => Position,
    getTargetPosition?: (d: D) => Position,
    getColor?: ((d: D) => RGBAColor) | RGBAColor,
    getWidth?: ((d: D) => number) | number,
    ...
  } & LayerProps<D>;

  declare export default class LineLayer<
      D,
      P: LineLayerProps<D> = LineLayerProps<D>
    >
    mixins Layer<D, P> {
    getShaders(): any;
    initializeState(params: any): void;
    updateState(x: {
      props: P,
      oldProps: P,
      changeFlags: any,
      ...
    }): void;
    draw(x: {
      uniforms: any,
      ...
    }): void;
    _getModel(gl: any): any;
  }
}

declare module "@deck.gl/layers/point-cloud-layer/point-cloud-layer-vertex.glsl" {
  declare var _default: string;
  declare export default typeof _default;
}

declare module "@deck.gl/layers/point-cloud-layer/point-cloud-layer-fragment.glsl" {
  declare var _default: string;
  declare export default typeof _default;
}

declare module "@deck.gl/layers/point-cloud-layer/point-cloud-layer" {
  import type { Layer } from "@deck.gl/core";

  import type { LayerProps } from "@deck.gl/core/lib/layer";

  import type { RGBAColor } from "@deck.gl/core/utils/color";

  import type { Position } from "@deck.gl/core/utils/positions";

  declare export type PointCloudLayerProps<D> = {
    sizeUnits?: string,
    pointSize?: number,
    material?: any,
    getPosition?: (d: D) => Position,
    getNormal?: ((d: D) => [number, number, number]) | [number, number, number],
    getColor?: ((d: D) => RGBAColor) | RGBAColor,
    ...
  } & LayerProps<D>;

  declare export default class PointCloudLayer<
      D,
      P: PointCloudLayerProps<D> = PointCloudLayerProps<D>
    >
    mixins Layer<D, P> {
    getShaders(id: any): any;
    initializeState(params: any): void;
    updateState(x: {
      props: P,
      oldProps: P,
      changeFlags: any,
      ...
    }): void;
    draw(x: {
      uniforms: any,
      ...
    }): void;
    _getModel(gl: any): any;
  }
}

declare module "@deck.gl/layers/scatterplot-layer/scatterplot-layer-vertex.glsl" {
  declare var _default: string;
  declare export default typeof _default;
}

declare module "@deck.gl/layers/scatterplot-layer/scatterplot-layer-fragment.glsl" {
  declare var _default: string;
  declare export default typeof _default;
}

declare module "@deck.gl/layers/scatterplot-layer/scatterplot-layer" {
  import type { Layer } from "@deck.gl/core";

  import type { LayerProps } from "@deck.gl/core/lib/layer";

  import type { Position } from "@deck.gl/core/utils/positions";

  import type { RGBAColor } from "@deck.gl/core/utils/color";

  declare export type ScatterplotLayerProps<D> = {
    radiusScale?: number,
    lineWidthUnits?: string,
    lineWidthScale?: number,
    stroked?: boolean,
    filled?: boolean,
    radiusMinPixels?: number,
    radiusMaxPixels?: number,
    lineWidthMinPixels?: number,
    lineWidthMaxPixels?: number,
    radiusUnits?: "meters" | "pixels",
    getPosition?: (d: D) => Position,
    getRadius?: ((d: D) => number) | number,
    getColor?: ((d: D) => RGBAColor) | RGBAColor,
    getFillColor?: ((d: D) => RGBAColor) | RGBAColor,
    getLineColor?: ((d: D) => RGBAColor) | RGBAColor,
    getLineWidth?: ((d: D) => number) | number,
    ...
  } & LayerProps<D>;

  declare export default class ScatterplotLayer<
      D,
      P: ScatterplotLayerProps<D> = ScatterplotLayerProps<D>
    >
    mixins Layer<D, P> {
    getShaders(id: any): any;
    initializeState(params: any): void;
    updateState(x: {
      props: P,
      oldProps: P,
      changeFlags: any,
      ...
    }): void;
    draw(x: {
      uniforms: any,
      ...
    }): void;
    _getModel(gl: any): any;
  }
}

declare module "@deck.gl/layers/column-layer/column-geometry" {
  import type { Geometry } from "@luma.gl/core";

  declare export default class ColumnGeometry mixins Geometry {
    constructor(props?: { ... }): this;
  }
}

declare module "@deck.gl/layers/column-layer/column-layer-vertex.glsl" {
  declare var _default: string;
  declare export default typeof _default;
}

declare module "@deck.gl/layers/column-layer/column-layer-fragment.glsl" {
  declare var _default: string;
  declare export default typeof _default;
}

declare module "@deck.gl/layers/column-layer/column-layer" {
  import type { Layer } from "@deck.gl/core";

  import typeof ColumnGeometry from "@deck.gl/layers/column-layer/column-geometry";

  import type { LayerProps } from "@deck.gl/core/lib/layer";

  import type { Position, Position2D } from "@deck.gl/core/utils/positions";

  import type { RGBAColor } from "@deck.gl/core/utils/color";

  declare export type ColumnLayerProps<D> = {
    diskResolution?: number,
    radius?: number,
    angle?: number,
    vertices?: Position2D[],
    offset?: number,
    coverage?: number,
    elevationScale?: number,
    filled?: boolean,
    stroked?: boolean,
    extruded?: boolean,
    wireframe?: boolean,
    lineWidthUnits?: string,
    lineWidthScale?: boolean,
    lineWidthMinPixels?: number,
    lineWidthMaxPixels?: number,
    material?: any,
    getPosition?: (d: D) => Position,
    getFillColor?: ((d: D) => RGBAColor) | RGBAColor,
    getLineColor?: ((d: D) => RGBAColor) | RGBAColor,
    getElevation?: ((d: D) => number) | number,
    getLineWidth?: ((d: D) => number) | number,
    ...
  } & LayerProps<D>;

  declare export default class ColumnLayer<
      D,
      P: ColumnLayerProps<D> = ColumnLayerProps<D>
    >
    mixins Layer<D, P> {
    getShaders(): any;

    /**
     * DeckGL calls initializeState when GL context is available
     * Essentially a deferred constructor
     */
    initializeState(params: any): void;
    updateState(x: {
      props: P,
      oldProps: P,
      changeFlags: any,
      ...
    }): void;
    getGeometry(diskResolution: any, vertices: any): ColumnGeometry;
    _getModel(gl: any): any;
    _updateGeometry(x: {
      diskResolution: any,
      vertices: any,
      ...
    }): void;
    draw(x: {
      uniforms: any,
      ...
    }): void;
  }
}

declare module "@deck.gl/layers/column-layer/grid-cell-layer" {
  import typeof ColumnLayer from "@deck.gl/layers/column-layer/column-layer";

  import type { LayerProps } from "@deck.gl/core/lib/layer";

  import type { Position2D } from "@deck.gl/core/utils/positions";

  import type { RGBAColor } from "@deck.gl/core/utils/color";

  declare export type GridCellLayerProps<D> = {
    cellSize?: number,
    coverage?: number,
    elevationScale?: number,
    extruded?: boolean,
    material?: any,
    getPosition?: (d: D) => Position2D,
    getColor?: ((d: D) => RGBAColor) | RGBAColor,
    getElevation?: ((d: D) => number) | number,
    ...
  } & LayerProps<D>;

  declare export default class GridCellLayer<
      D,
      P: GridCellLayerProps<D> = GridCellLayerProps<D>
    >
    mixins ColumnLayer<D, P> {
    constructor(props: GridCellLayerProps<D>): this;
    getGeometry(diskResolution: any): any;
    draw(x: {
      uniforms: any,
      ...
    }): void;
  }
}

declare module "@deck.gl/layers/path-layer/path-tesselator" {
  import type { Tesselator } from "@deck.gl/core";

  declare export default class PathTesselator mixins Tesselator {
    constructor(opts: any): this;
    getGeometryFromBuffer(buffer: any): any;
    get(attributeName: any): any;
    getGeometrySize(path: any): any;
    updateGeometryAttributes(path: any, context: any): void;
    _updateSegmentTypes(path: any, context: any): void;
    _updatePositions(path: any, context: any): void;
    getPathLength(path: any): any;
    getPointOnPath(path: any, index: any): any;
    isClosed(path: any): any;
  }
}

declare module "@deck.gl/layers/path-layer/path-layer-vertex.glsl" {
  declare var _default: string;
  declare export default typeof _default;
}

declare module "@deck.gl/layers/path-layer/path-layer-fragment.glsl" {
  declare var _default: string;
  declare export default typeof _default;
}

declare module "@deck.gl/layers/path-layer/path-layer" {
  import type { Layer } from "@deck.gl/core";

  import type { LayerProps } from "@deck.gl/core/lib/layer";

  import type { Position } from "@deck.gl/core/utils/positions";

  import type { RGBAColor } from "@deck.gl/core/utils/color";

  declare export type TypedArray =
    | Int8Array
    | Uint8Array
    | Int16Array
    | Uint16Array
    | Int32Array
    | Uint32Array
    | Uint8ClampedArray
    | Float32Array
    | Float64Array;
  declare export type PathLayerProps<D> = {
    widthUnits?: string,
    widthScale?: number,
    widthMinPixels?: number,
    widthMaxPixels?: number,
    rounded?: boolean,
    billboard?: boolean,
    miterLimit?: number,
    _pathType?: "loop" | "open",
    getPath?: (d: D) => Position[] | TypedArray,
    getColor?: ((d: D) => RGBAColor) | RGBAColor,
    getWidth?: ((d: D) => number) | number,
    ...
  } & LayerProps<D>;

  declare export default class PathLayer<
      D,
      P: PathLayerProps<D> = PathLayerProps<D>
    >
    mixins Layer<D, P> {
    getShaders(): any;
    initializeState(params: any): void;
    updateState(x: {
      oldProps: P,
      props: P,
      changeFlags: any,
      ...
    }): void;
    getPickingInfo(params: any): any;
    draw(x: {
      uniforms: any,
      ...
    }): void;
    _getModel(gl: any): any;
    calculatePositions(attribute: any): void;
    calculateSegmentTypes(attribute: any): void;
  }
}

declare module "@deck.gl/layers/solid-polygon-layer/polygon" {
  /**
   * Counts the number of vertices in any polygon representation.
   * @param {Array | Object} polygon
   * @param {Number} positionSize - size of a position, 2 (xy) or 3 (xyz)
   * @returns {Number} vertex count
   */
  declare export function getVertexCount(
    polygon: any,
    positionSize: any,
    normalization?: boolean
  ): any;

  /**
 * Normalize any polygon representation into the "complex flat" format
 * @param {Array | Object} polygon
 * @param {Number} positionSize - size of a position, 2 (xy) or 3 (xyz)
 * @param {Number} [vertexCount] - pre-computed vertex count in the polygon.
If provided, will skip counting.
 * @return {Object} - {positions: <Float64Array>, holeIndices: <Array|null>}
 */
  declare export function normalize(
    polygon: any,
    positionSize: any,
    vertexCount: any
  ):
    | Float64Array
    | {
        positions: Float64Array,
        holeIndices: any[],
        ...
      };

  declare export function getSurfaceIndices(
    normalizedPolygon: any,
    positionSize: any,
    preproject: any
  ): any;
}

declare module "@deck.gl/layers/solid-polygon-layer/polygon-tesselator" {
  import type { Tesselator } from "@deck.gl/core";

  declare export default class PolygonTesselator mixins Tesselator {
    constructor(opts: any): this;
    get(attributeName: any): any;
    updateGeometry(opts: any): void;
    getGeometrySize(polygon: any): any;
    getGeometryFromBuffer(buffer: any): any;
    updateGeometryAttributes(polygon: any, context: any): void;
    _updateIndices(
      polygon: any,
      x: {
        geometryIndex: any,
        vertexStart: any,
        indexStart: any,
        ...
      }
    ): void;
    _updatePositions(
      polygon: any,
      x: {
        vertexStart: any,
        geometrySize: any,
        ...
      }
    ): void;
    _updateVertexValid(
      polygon: any,
      x: {
        vertexStart: any,
        geometrySize: any,
        ...
      }
    ): void;
  }
}

declare module "@deck.gl/layers/solid-polygon-layer/solid-polygon-layer-vertex-main.glsl" {
  declare var _default: string;
  declare export default typeof _default;
}

declare module "@deck.gl/layers/solid-polygon-layer/solid-polygon-layer-vertex-top.glsl" {
  declare var _default: string;
  declare export default typeof _default;
}

declare module "@deck.gl/layers/solid-polygon-layer/solid-polygon-layer-vertex-side.glsl" {
  declare var _default: string;
  declare export default typeof _default;
}

declare module "@deck.gl/layers/solid-polygon-layer/solid-polygon-layer-fragment.glsl" {
  declare var _default: string;
  declare export default typeof _default;
}

declare module "@deck.gl/layers/solid-polygon-layer/solid-polygon-layer" {
  import type { Layer } from "@deck.gl/core";

  import type { LayerProps } from "@deck.gl/core/lib/layer";

  import type { Position } from "@deck.gl/core/utils/positions";

  import type { RGBAColor } from "@deck.gl/core/utils/color";

  declare export type SolidPolygonLayerProps<D> = {
    filled?: boolean,
    extruded?: boolean,
    wireframe?: boolean,
    elevationScale?: number,
    material?: any,
    _normalize?: boolean,
    getPolygon?: (x: D) => Position[],
    getFillColor?: ((x: D) => RGBAColor) | RGBAColor,
    getLineColor?: ((x: D) => RGBAColor) | RGBAColor,
    getElevation?: ((x: D) => number) | number,
    ...
  } & LayerProps<D>;

  declare export default class SolidPolygonLayer<
      D,
      P: SolidPolygonLayerProps<D> = SolidPolygonLayerProps<D>
    >
    mixins Layer<D, P> {
    getShaders(vs: any): any;
    initializeState(params: any): void;
    getPickingInfo(params: any): any;
    draw(x: {
      uniforms: any,
      ...
    }): void;
    updateState(updateParams: any): void;
    updateGeometry(x: {
      props: P,
      oldProps: P,
      changeFlags: any,
      ...
    }): void;
    _getModels(
      gl: any
    ): {
      models: any[],
      topModel: any,
      sideModel: any,
      ...
    };
    calculateIndices(attribute: any): void;
    calculatePositions(attribute: any): void;
    calculateVertexValid(attribute: any): void;
  }
}

declare module "@deck.gl/layers/utils" {
  declare export function replaceInRange(x: {
    data: any,
    getIndex: any,
    dataRange: any,
    replace: any,
    ...
  }): {
    startRow: any,
    endRow: any,
    ...
  };
}

declare module "@deck.gl/layers/polygon-layer/polygon-layer" {
  import type { CompositeLayer } from "@deck.gl/core";

  import type { CompositeLayerProps } from "@deck.gl/core/lib/composite-layer";

  import type { Position } from "@deck.gl/core/utils/positions";

  import type { RGBAColor } from "@deck.gl/core/utils/color";

  declare export type PolygonLayerProps<D> = {
    filled?: boolean,
    stroked: boolean,
    extruded: boolean,
    wireframe?: boolean,
    elevationScale?: number,
    lineWidthUnits?: string,
    lineWidthScale?: boolean,
    lineWidthMinPixels?: number,
    lineWidthMaxPixels?: number,
    lineJointRounded?: boolean,
    lineMiterLimit?: number,
    material?: any,
    _normalize?: boolean,
    getPolygon?: (x: D) => Position[],
    getFillColor?: ((x: D) => RGBAColor) | RGBAColor,
    getLineColor?: ((x: D) => RGBAColor) | RGBAColor,
    getLineWidth?: ((x: D) => number) | number,
    getElevation?: ((x: D) => number) | number,
    ...
  } & CompositeLayerProps<D>;

  declare export default class PolygonLayer<
      D,
      P: PolygonLayerProps<D> = PolygonLayerProps<D>
    >
    mixins CompositeLayer<D, P> {
    constructor(props: PolygonLayerProps<D>): this;
    initializeState(params: any): void;
    updateState(x: {
      oldProps: PolygonLayerProps<D>,
      props: PolygonLayerProps<D>,
      changeFlags: any,
      ...
    }): void;
    _getPaths(dataRange?: { ... }): any[];
    renderLayers(): any[];
  }
}

declare module "@deck.gl/layers/geojson-layer/geojson" {
  /**
 * "Normalizes" complete or partial GeoJSON data into iterable list of features
 * Can accept GeoJSON geometry or "Feature", "FeatureCollection" in addition
 * to plain arrays and iterables.
 * Works by extracting the feature array or wrapping single objects in an array,
 * so that subsequent code can simply iterate over features.
 * @param {{[key: string]: any}} geojson - geojson data
 * @param {Object | Array} data - geojson object (FeatureCollection, Feature or
Geometry) or array of features
 * @return {Array | "iteratable"} - iterable list of features
 */
  declare export function getGeojsonFeatures(geojson: any): any;

  declare export function separateGeojsonFeatures(
    features: any,
    wrapFeature: any,
    dataRange?: { ... }
  ): {
    pointFeatures: any[],
    lineFeatures: any[],
    polygonFeatures: any[],
    polygonOutlineFeatures: any[],
    ...
  };

  declare export function validateGeometry(
    type: any,
    coordinates: any
  ): boolean;
}

declare module "@deck.gl/layers/geojson-layer/geojson-layer" {
  import type { CompositeLayer } from "@deck.gl/core";

  import type { CompositeLayerProps } from "@deck.gl/core/lib/composite-layer";

  import type { RGBAColor } from "@deck.gl/core/utils/color";

  declare export type GeoJsonLayerProps<D> = {
    filled?: boolean,
    stroked?: boolean,
    extruded?: boolean,
    wireframe?: boolean,
    lineWidthUnits?: string,
    lineWidthScale?: number,
    lineWidthMinPixels?: number,
    lineWidthMaxPixels?: number,
    lineJointRounded?: boolean,
    lineMiterLimit?: number,
    elevationScale?: number,
    pointRadiusScale?: number,
    pointRadiusUnits?: string,
    pointRadiusMinPixels?: number,
    pointRadiusMaxPixels?: number,
    material?: any,
    getLineColor?: ((d: D) => RGBAColor) | RGBAColor,
    getFillColor?: ((d: D) => RGBAColor) | RGBAColor,
    getRadius?: ((d: D) => number) | number,
    getLineWidth?: ((d: D) => number) | number,
    getElevation?: ((d: D) => number) | number,
    ...
  } & CompositeLayerProps<D>;

  declare export default class GeoJsonLayer<
      D,
      P: GeoJsonLayerProps<D> = GeoJsonLayerProps<D>
    >
    mixins CompositeLayer<D, P> {
    constructor(props: GeoJsonLayerProps<D>): this;
    initializeState(params: any): void;
    updateState(x: {
      props: any,
      changeFlags: any,
      ...
    }): void;
    renderLayers(): any[];
    _getHighlightedIndex(data: any): any;
  }
}

declare module "@deck.gl/layers/text-layer/multi-icon-layer/multi-icon-layer-fragment.glsl" {
  declare var _default: string;
  declare export default typeof _default;
}

declare module "@deck.gl/layers/text-layer/multi-icon-layer/multi-icon-layer" {
  import typeof IconLayer from "@deck.gl/layers/icon-layer/icon-layer";

  declare export default class MultiIconLayer<D> mixins IconLayer<D> {
    getShaders(): any;
    initializeState(params: any): void;
    updateState(updateParams: any): void;
    draw(x: {
      uniforms: any,
      ...
    }): void;
    getInstanceOffset(icons: any): any[];
    getInstanceColorMode(icons: any): number;
    getInstanceIconFrame(icons: any): any[];
  }
}

declare module "@deck.gl/layers/text-layer/utils" {
  declare export function nextPowOfTwo(number: any): number;

  /**
 * Generate character mapping table or update from an existing mapping table
 * @param {Array | Set} characterSet new characters
 * @param {Function} getFontWidth function to get width of each character
 * @param {Number} fontHeight height of font
 * @param {Number} buffer buffer surround each character
 * @param {Number} maxCanvasWidth max width of font atlas
 * @param {Object} mapping old mapping table
 * @param {Number} xOffset x position of last character in old mapping table
 * @param {Number} yOffset y position of last character in old mapping table
 * @returns {{
mapping: Object,
xOffset: Number,...
}} x position of last character
yOffset: Number, y position of last character in old mapping table
canvasHeight: Number, height of the font atlas canvas, power of 2
}}
 */
  declare export function buildMapping(x: {
    characterSet: any,
    getFontWidth: any,
    fontHeight: any,
    buffer: any,
    maxCanvasWidth: any,
    mapping?: { ... },
    xOffset?: number,
    yOffset?: number,
    ...
  }): {
    mapping: { ... },
    xOffset: number,
    yOffset: number,
    canvasHeight: number,
    ...
  };

  declare export function autoWrapping(
    text: any,
    wordBreak: any,
    maxWidth: any,
    iconMapping: any
  ): {
    rows: any[],
    lastRowStartCharIndex: number,
    lastRowOffsetLeft: number,
    ...
  };

  /**
 * Transform a text paragraph to an array of characters, each character contains
 * @param paragraph : {String}
 * @param {Object} iconMapping character mapping table for retrieving a character from font atlas
 * @param {Number} lineHeight css line-height
 * @param {String} wordBreak css word-break option
 * @param {number} maxWidth css max-width
 * @param {Array} transformedData output transformed data array, each datum contains
- text: character
- index: character index in the paragraph
- x: x offset in the row,
- y: y offset in the paragraph
- size: [width, height] size of the paragraph
- rowSize: [rowWidth, rowHeight] size of the row
- len: length of the paragraph
 */
  declare export function transformParagraph(
    paragraph: any,
    lineHeight: any,
    wordBreak: any,
    maxWidth: any,
    iconMapping: any
  ): {
    characters: any[],
    size: number[],
    ...
  };

  declare export function getTextFromBuffer(x: {
    value: any,
    length: any,
    stride: any,
    offset: any,
    startIndices: any,
    ...
  }): {
    texts: any[],
    characterCount: any,
    ...
  };
}

declare module "@deck.gl/layers/text-layer/lru-cache" {
  /**
   * LRU Cache class with limit
   *
   * Update order for each get/set operation
   * Delete oldest when reach given limit
   */
  declare export default class LRUCache {
    constructor(limit?: number): this;
    clear(): void;
    get(key: any): any;
    set(key: any, value: any): void;
    delete(key: any): void;
    _deleteCache(key: any): void;
    _deleteOrder(key: any): void;
    _appendOrder(key: any): void;
  }
}

declare module "@deck.gl/layers/text-layer/font-atlas-manager" {
  declare export var DEFAULT_CHAR_SET: any[];
  declare export var DEFAULT_FONT_FAMILY: any; // "Monaco, monospace"
  declare export var DEFAULT_FONT_WEIGHT: any; // "normal"
  declare export var DEFAULT_FONT_SIZE: any; // 64
  declare export var DEFAULT_BUFFER: any; // 2
  declare export var DEFAULT_CUTOFF: any; // 0.25
  declare export var DEFAULT_RADIUS: any; // 3
  declare export default class FontAtlasManager {
    constructor(gl: any): this;
    finalize(): void;
    texture: any;
    mapping: any;
    scale: number;
    setProps(props?: { ... }): void;
    _updateTexture(x: {
      data: any,
      width: any,
      height: any,
      ...
    }): void;
    _generateFontAtlas(
      key: any,
      characterSet: any,
      cachedFontAtlas: any
    ): {
      xOffset: number,
      yOffset: number,
      mapping: { ... },
      data: any,
      width: any,
      height: any,
      ...
    };
    _getKey(): string;
  }
  declare export type FontSettings = {
    fontSize?: number;
    buffer?: number;
    sdf?: boolean;
    cutoff?: number;
    radius?: number;
  }
}

declare module "@deck.gl/layers/text-layer/text-layer" {
  import type { CompositeLayer } from "@deck.gl/core";

  import type { FontSettings } from "@deck.gl/layers/text-layer/font-atlas-manager";

  import type { RGBAColor } from "@deck.gl/core/utils/color";

  import type { CompositeLayerProps } from "@deck.gl/core/lib/composite-layer";

  declare export type TextAnchor = "start" | "middle" | "end";
  declare export type AlignmentBaseline = "top" | "center" | "bottom";
  declare export type TextLayerProps<D> = {
    sizeScale?: number,
    sizeUnits?: "meters" | "pixels",
    sizeMinPixels?: number,
    sizeMaxPixels?: number,
    billboard?: boolean,
    backgroundColor?: RGBAColor,
    fontFamily?: string,
    characterSet?: string | string[],
    fontWeight?: number | string,
    lineHeight?: number,
    fontSettings?: FontSettings,
    wordBreak?: "break-all" | "break-word",
    maxWidth?: number,
    getText?: (x: D) => string,
    getPosition?: (x: D) => [number, number],
    getSize?: ((x: D) => number) | number,
    getColor?: ((x: D) => RGBAColor) | RGBAColor,
    getAngle?: ((x: D) => number) | number,
    getTextAnchor?: ((x: D) => TextAnchor) | TextAnchor,
    getAlignmentBaseline?: ((x: D) => AlignmentBaseline) | AlignmentBaseline,
    getPixelOffset?: ((x: D) => number[]) | number[],
    ...
  } & CompositeLayerProps<D>;

  declare export default class TextLayer<
      D,
      P: TextLayerProps<D> = TextLayerProps<D>
    >
    mixins CompositeLayer<D, P> {
    constructor(props: TextLayerProps<D>): this;
    initializeState(params: any): void;
    updateState(x: {
      props: TextLayerProps<D>,
      oldProps: TextLayerProps<D>,
      changeFlags: any,
      ...
    }): void;
    finalizeState(): void;
    getPickingInfo(x: {
      info: any,
      ...
    }): any;
    _updateFontAtlas(oldProps: any, props: any): void;
    _fontChanged(oldProps: any, props: any): boolean;
    _updateText(): void;
    getIconOffsets(object: any, objectInfo: any): any[];
    renderLayers(): any;
  }
}

declare module "@deck.gl/layers" {
  declare export {
    default as ArcLayer,
    ArcLayerProps,
  } from "@deck.gl/layers/arc-layer/arc-layer";

  declare export {
    default as BitmapLayer,
    BitmapLayerProps,
  } from "@deck.gl/layers/bitmap-layer/bitmap-layer";

  declare export {
    default as IconLayer,
    IconLayerProps,
  } from "@deck.gl/layers/icon-layer/icon-layer";

  declare export {
    default as LineLayer,
    LineLayerProps,
  } from "@deck.gl/layers/line-layer/line-layer";

  declare export {
    default as PointCloudLayer,
    PointCloudLayerProps,
  } from "@deck.gl/layers/point-cloud-layer/point-cloud-layer";

  declare export {
    default as ScatterplotLayer,
    ScatterplotLayerProps,
  } from "@deck.gl/layers/scatterplot-layer/scatterplot-layer";

  declare export {
    default as ColumnLayer,
    ColumnLayerProps,
  } from "@deck.gl/layers/column-layer/column-layer";

  declare export {
    default as GridCellLayer,
    GridCellLayerProps,
  } from "@deck.gl/layers/column-layer/grid-cell-layer";

  declare export {
    default as PathLayer,
    PathLayerProps,
  } from "@deck.gl/layers/path-layer/path-layer";

  declare export {
    default as PolygonLayer,
    PolygonLayerProps,
  } from "@deck.gl/layers/polygon-layer/polygon-layer";

  declare export {
    default as GeoJsonLayer,
    GeoJsonLayerProps,
  } from "@deck.gl/layers/geojson-layer/geojson-layer";

  declare export {
    default as TextLayer,
    TextLayerProps,
  } from "@deck.gl/layers/text-layer/text-layer";

  declare export {
    default as SolidPolygonLayer,
    SolidPolygonLayerProps,
  } from "@deck.gl/layers/solid-polygon-layer/solid-polygon-layer";

  declare export { default as _MultiIconLayer } from "@deck.gl/layers/text-layer/multi-icon-layer/multi-icon-layer";
}
