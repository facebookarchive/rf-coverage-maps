/**
 * Flowtype definitions for react-vis
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.11.0
 * @flow
 */

declare module "react-vis" {
  import type {
    Component,
    PureComponent,
    ReactChild,
    Node,
    StatelessFunctionalComponent,
    MouseEventHandler,
    TouchEventHandler,
    WheelEventHandler,
    MouseEvent,
    CSSProperties,
  } from "react";

  declare export type AbstractSeriesPoint = {
    [key: string]: any;
  }
  declare export type RVMouseEventHandler = MouseEventHandler<HTMLElement>;
  declare export type RVTouchEventHandler = TouchEventHandler<HTMLElement>;
  declare export type RVWheelEventHandler = WheelEventHandler<HTMLElement>;
  declare export type RVItemEventHandler = (
    item: any,
    index: number,
    event: MouseEvent<HTMLElement>
  ) => void;
  declare export type RVValueEventHandler<T: AbstractSeriesPoint> = (
    datapoint: T,
    event: MouseEvent<HTMLElement>
  ) => void;
  declare export type RVNearestXData<T: AbstractSeriesPoint> = {
    event: MouseEvent<HTMLElement>,
    innerX: $PropertyType<T, "x">,
    index: number,
    ...
  };
  declare export type RVNearestXEventHandler<T: AbstractSeriesPoint> = (
    datapoint: T,
    data: RVNearestXData<T>
  ) => void;
  declare export type RVNearestXYData<T: AbstractSeriesPoint> = {
    event: MouseEvent<HTMLElement>,
    innerX: $PropertyType<T, "x">,
    innerY: $PropertyType<T, "y">,
    index: number,
    ...
  };
  declare export type RVNearestXYEventHandler<T: AbstractSeriesPoint> = (
    datapoint: T,
    data: RVNearestXYData<T>
  ) => void;
  declare export type RVGet<T: AbstractSeriesPoint, K: $Keys<T>> = (
    datapoint: T
  ) => $ElementType<T, K>;
  declare export type RVGetNull<T: AbstractSeriesPoint> = (datapoint: T) => any;
  declare export type RVGetAlignStyle = (
    align: {
      horizontal: string,
      vertical: string,
      ...
    },
    x: number,
    y: number
  ) => CSSProperties;
  declare export type RVTickFormat = (tick: any) => string;
  declare export type LineSeriesPoint = {
    x: number,
    y: number,
    color?: string | number,
    ...
  } & AbstractSeriesPoint;

  declare export type LineMarkSeriesPoint = {
    x: string | number | Date,
    y: string | number | Date,
    color?: string | number,
    opacity?: string | number,
    stroke?: string | number,
    fill?: string | number,
    size?: string | number,
    ...
  } & AbstractSeriesPoint;

  declare export type MarkSeriesPoint = {
    x: string | number | Date,
    y: string | number | Date,
    color?: string | number,
    opacity?: string | number,
    stroke?: string | number,
    fill?: string | number,
    size?: string | number,
    ...
  } & AbstractSeriesPoint;

  declare export type HorizontalBarSeriesPoint = {
    x: string | number,
    y: string | number,
    color?: string | number,
    opacity?: string | number,
    stroke?: string | number,
    fill?: string | number,
    ...
  } & AbstractSeriesPoint;

  declare export type VerticalBarSeriesPoint = {
    x: string | number,
    y: number,
    color?: string | number,
    opacity?: string | number,
    stroke?: string | number,
    fill?: string | number,
    ...
  } & AbstractSeriesPoint;

  declare export type ArcSeriesPoint = {
    angle0: number,
    angle: number,
    radius0: number,
    radius: number,
    color?: string | number,
    opacity?: string | number,
    stroke?: string | number,
    fill?: string | number,
    ...
  } & AbstractSeriesPoint;

  declare export type AreaSeriesPoint = {
    x: number,
    y: number,
    y0?: number,
    ...
  } & AbstractSeriesPoint;

  declare export type ContourSeriesPoint = {
    x: number,
    y: number,
    ...
  } & AbstractSeriesPoint;

  declare export type HeatmapSeriesPoint = {
    x: number,
    y: number,
    color?: string | number,
    ...
  } & AbstractSeriesPoint;

  declare export type LabelSeriesPoint = {
    x: number,
    y: number,
    label: string,
    xOffset?: number,
    yOffset?: number,
    rotation?: number,
    ...
  } & AbstractSeriesPoint;

  declare export type CustomSVGSeriesPoint = {
    x: number,
    y: number,
    ...
  } & AbstractSeriesPoint;

  declare export type PolygonSeriesPoint = {
    x: number,
    y: number,
    ...
  } & AbstractSeriesPoint;

  declare export type RectSeriesPoint = {
    x: string | number | Date,
    x0: string | number | Date,
    y: string | number | Date,
    y0: string | number | Date,
    color?: string | number,
    opacity?: string | number,
    stroke?: string | number,
    fill?: string | number,
    ...
  } & AbstractSeriesPoint;

  declare export type HorizontalRectSeriesPoint = RectSeriesPoint;
  declare export type VerticalRectSeriesPoint = RectSeriesPoint;
  declare export type WhiskerSeriesPoint = {
    x: string | number | Date,
    y: string | number | Date,
    color?: string | number,
    opacity?: string | number,
    stroke?: string | number,
    size?: string | number,
    xVariance?: string | number,
    yVariance?: string | number,
    ...
  } & AbstractSeriesPoint;

  declare export type TreemapPoint = {
    title: string,
    size: number,
    opacity?: number,
    color?: string | number,
    style: CSSProperties,
    children: Array<TreemapPoint>,
    ...
  } & AbstractSeriesPoint;

  declare export type ParallelCoordinatesPoint = {
    [key: string]: number,
    ...
  } & AbstractSeriesPoint;

  declare export type RadialChartPoint = {
    angle: number,
    radius?: number,
    label?: string,
    subLabel?: string,
    color?: string,
    style?: { [key: string]: any },
    className?: string,
    ...
  } & AbstractSeriesPoint;

  declare export type SankeyPoint = {
    name: string,
    color?: string,
    opacity?: number,
    key?: string,
    ...
  } & AbstractSeriesPoint;

  declare export type SunburstPoint = {
    title: string,
    size: number,
    color?: number,
    label?: string,
    labelStyle?: CSSProperties,
    dontRotateLabel?: boolean,
    children?: Array<SunburstPoint>,
    ...
  } & AbstractSeriesPoint;

  declare export type VoronoiPoint = {
    x: number,
    y: number,
    ...
  } & AbstractSeriesPoint;

  declare export type DecorativeAxisPoint = { ... } & AbstractSeriesPoint;

  declare export type RadarChartPoint = { ... } & AbstractSeriesPoint;

  declare export type AbstractSeriesProps<T: AbstractSeriesPoint> = {
    _xValue?: $PropertyType<T, "_x">;
    xDomain?: Array<$PropertyType<T, "x">>;
    getX?: RVGet<T, "x">;
    getX0?: RVGet<T, "x0">;
    xRange?: Array<$PropertyType<T, "x">>;
    xType?:
      | "linear"
      | "ordinal"
      | "category"
      | "literal"
      | "log"
      | "time"
      | "time-utc";
    xDistance?: number;
    xBaseValue?: $PropertyType<T, "x">;
    _yValue?: $PropertyType<T, "_y">;
    yDomain?: Array<$PropertyType<T, "y">>;
    getY?: RVGet<T, "y">;
    getY0?: RVGet<T, "y0">;
    yRange?: Array<$PropertyType<T, "y">>;
    yType?:
      | "linear"
      | "ordinal"
      | "category"
      | "literal"
      | "log"
      | "time"
      | "time-utc";
    yDistance?: number;
    yBaseValue?: $PropertyType<T, "y">;
    _sizeValue?: $PropertyType<T, "_size">;
    sizeDomain?: Array<$PropertyType<T, "size">>;
    getSize?: RVGet<T, "size">;
    getSize0?: RVGet<T, "size0">;
    sizeRange?: Array<$PropertyType<T, "size">>;
    sizeType?:
      | "linear"
      | "ordinal"
      | "category"
      | "literal"
      | "log"
      | "time"
      | "time-utc";
    sizeDistance?: number;
    sizeBaseValue?: $PropertyType<T, "size">;
    _opacityValue?: $PropertyType<T, "_opacity">;
    opacityDomain?: Array<$PropertyType<T, "opacity">>;
    getOpacity?: RVGet<T, "opacity">;
    getOpacity0?: RVGet<T, "opacity0">;
    opacityRange?: Array<$PropertyType<T, "opacity">>;
    opacityType?:
      | "linear"
      | "ordinal"
      | "category"
      | "literal"
      | "log"
      | "time"
      | "time-utc";
    opacityDistance?: number;
    opacityBaseValue?: $PropertyType<T, "opacity">;
    _colorValue?: $PropertyType<T, "_color">;
    colorDomain?: Array<$PropertyType<T, "color">>;
    getColor?: RVGet<T, "color">;
    getColor0?: RVGet<T, "color0">;
    colorRange?: Array<$PropertyType<T, "color">>;
    colorType?:
      | "linear"
      | "ordinal"
      | "category"
      | "literal"
      | "log"
      | "time"
      | "time-utc";
    colorDistance?: number;
    colorBaseValue?: $PropertyType<T, "color">;
    width?: number;
    height?: number;
    data?: Array<T | Array<any>>;
    onValueMouseOver?: RVValueEventHandler<T>;
    onValueMouseOut?: RVValueEventHandler<T>;
    onValueClick?: RVValueEventHandler<T>;
    onValueRightClick?: RVValueEventHandler<T>;
    onSeriesMouseOver?: RVMouseEventHandler;
    onSeriesMouseOut?: RVMouseEventHandler;
    onSeriesClick?: RVMouseEventHandler;
    onSeriesRightClick?: RVMouseEventHandler;
    onNearestX?: RVNearestXEventHandler<T>;
    onNearestXY?: RVNearestXEventHandler<T>;
    style?: CSSProperties;
    animation?:
      | string
      | {
          stiffness?: number,
          nonAnimatedProps?: Array<string>,
          damping?: number,
          ...
        }
      | boolean;
    stack?: boolean;
    color?: string | number;
    stroke?: string | number;
    fill?: string | number;
    opacity?: number;
  }
  declare export class AbstractSeries<T> extends Class<PureComponent<T>> {}
  declare export type LineSeriesProps = {
    strokeStyle?: "dashed" | "solid",
    curve?: string | Function,
    getNull?: RVGetNull<LineSeriesPoint>,
    ...
  } & AbstractSeriesProps<LineSeriesPoint>;

  declare export class LineSeries extends AbstractSeries<LineSeriesProps> {}
  declare export type LineSeriesCanvasProps = {
    strokeWidth?: number,
    ...
  } & AbstractSeriesProps<LineSeriesPoint>;

  declare export class LineSeriesCanvas
    extends AbstractSeries<LineSeriesCanvasProps> {}
  declare export type HorizontalBarSeriesProps = {
    ...
  } & AbstractSeriesProps<HorizontalBarSeriesPoint>;

  declare export class HorizontalBarSeries
    extends AbstractSeries<HorizontalBarSeriesProps> {}
  declare export type HorizontalBarSeriesCanvasProps = {
    ...
  } & AbstractSeriesProps<HorizontalBarSeriesPoint>;

  declare export class HorizontalBarSeriesCanvas
    extends AbstractSeries<HorizontalBarSeriesCanvasProps> {}
  declare export type VerticalBarSeriesProps = {
    ...
  } & AbstractSeriesProps<VerticalBarSeriesPoint>;

  declare export class VerticalBarSeries
    extends AbstractSeries<VerticalBarSeriesProps> {}
  declare export type VerticalBarSeriesCanvasProps = {
    ...
  } & AbstractSeriesProps<VerticalBarSeriesPoint>;

  declare export class VerticalBarSeriesCanvas
    extends AbstractSeries<VerticalBarSeriesCanvasProps> {}
  declare export type VerticalRectSeriesProps = {
    ...
  } & AbstractSeriesProps<VerticalRectSeriesPoint>;

  declare export class VerticalRectSeries
    extends AbstractSeries<VerticalRectSeriesProps> {}
  declare export type VerticalRectSeriesCanvasProps = {
    ...
  } & AbstractSeriesProps<VerticalRectSeriesPoint>;

  declare export class VerticalRectSeriesCanvas
    extends AbstractSeries<VerticalRectSeriesCanvasProps> {}
  declare export type HorizontalRectSeriesProps = {
    ...
  } & AbstractSeriesProps<HorizontalRectSeriesPoint>;

  declare export class HorizontalRectSeries
    extends AbstractSeries<HorizontalRectSeriesProps> {}
  declare export type HorizontalRectSeriesCanvasProps = {
    ...
  } & AbstractSeriesProps<HorizontalRectSeriesPoint>;

  declare export class HorizontalRectSeriesCanvas
    extends AbstractSeries<HorizontalRectSeriesCanvasProps> {}
  declare export type LabelSeriesProps = {
    allowOffsetToBeReversed?: boolean,
    marginLeft?: number,
    marginTop?: number,
    rotation?: number,
    labelAnchorX?: string,
    labelAnchorY?: string,
    ...
  } & AbstractSeriesProps<LabelSeriesPoint>;

  declare export class LabelSeries extends AbstractSeries<LabelSeriesProps> {}
  declare export type PolygonSeriesProps = {
    ...
  } & AbstractSeriesProps<PolygonSeriesPoint>;

  declare export class PolygonSeries
    extends AbstractSeries<PolygonSeriesProps> {}
  declare export type RectSeriesProps = {
    linePosAttr?: string,
    valuePosAttr?: string,
    lineSizeAttr?: string,
    valueSizeAttr?: string,
    ...
  } & AbstractSeriesProps<RectSeriesPoint>;

  declare export class RectSeries extends AbstractSeries<RectSeriesProps> {}
  declare export type RectSeriesCanvasProps = {
    ...
  } & AbstractSeriesProps<RectSeriesPoint>;

  declare export class RectSeriesCanvas
    extends AbstractSeries<RectSeriesCanvasProps> {}
  declare export type MarkSeriesProps = {
    getNull?: RVGetNull<MarkSeriesPoint>,
    strokeWidth?: number,
    ...
  } & AbstractSeriesProps<MarkSeriesPoint>;

  declare export class MarkSeries extends AbstractSeries<MarkSeriesProps> {}
  declare export type MarkSeriesCanvasProps = {
    ...
  } & AbstractSeriesProps<MarkSeriesPoint>;

  declare export class MarkSeriesCanvas
    extends AbstractSeries<MarkSeriesCanvasProps> {}
  declare export type WhiskerSeriesProps = {
    strokeWidth?: number,
    ...
  } & AbstractSeriesProps<WhiskerSeriesPoint>;

  declare export class WhiskerSeries
    extends AbstractSeries<WhiskerSeriesProps> {}
  declare export type HeatmapSeriesProps = {
    ...
  } & AbstractSeriesProps<HeatmapSeriesPoint>;

  declare export class HeatmapSeries
    extends AbstractSeries<HeatmapSeriesProps> {}
  declare export type ContourSeriesProps = {
    bandwidth?: number,
    marginLeft?: number,
    marginTop?: number,
    ...
  } & AbstractSeriesProps<ContourSeriesPoint>;

  declare export class ContourSeries
    extends AbstractSeries<ContourSeriesProps> {}
  declare export type CustomSVGSeriesProps = {
    customComponent?: string | Function,
    marginLeft?: number,
    marginTop?: number,
    ...
  } & AbstractSeriesProps<CustomSVGSeriesPoint>;

  declare export class CustomSVGSeries
    extends AbstractSeries<CustomSVGSeriesProps> {}
  declare export type AreaSeriesProps = {
    getNull?: RVGetNull<AreaSeriesPoint>,
    ...
  } & AbstractSeriesProps<AreaSeriesPoint>;

  declare export class AreaSeries extends AbstractSeries<AreaSeriesProps> {}
  declare export type ArcSeriesProps = {
    _radiusValue?: $PropertyType<ArcSeriesPoint, "_radius">,
    radiusDomain?: Array<$PropertyType<ArcSeriesPoint, "radius">>,
    getRadius?: RVGet<ArcSeriesPoint, "radius">,
    getRadius0?: RVGet<ArcSeriesPoint, "radius0">,
    radiusRange?: Array<$PropertyType<ArcSeriesPoint, "radius">>,
    radiusType?:
      | "linear"
      | "ordinal"
      | "category"
      | "literal"
      | "log"
      | "time"
      | "time-utc",
    radiusDistance?: number,
    radiusBaseValue?: $PropertyType<ArcSeriesPoint, "radius">,
    _angleValue?: $PropertyType<ArcSeriesPoint, "_angle">,
    angleDomain?: Array<$PropertyType<ArcSeriesPoint, "angle">>,
    getAngle?: RVGet<ArcSeriesPoint, "angle">,
    getAngle0?: RVGet<ArcSeriesPoint, "angle0">,
    angleRange?: Array<$PropertyType<ArcSeriesPoint, "angle">>,
    angleType?:
      | "linear"
      | "ordinal"
      | "category"
      | "literal"
      | "log"
      | "time"
      | "time-utc",
    angleDistance?: number,
    angleBaseValue?: $PropertyType<ArcSeriesPoint, "angle">,
    center?: {
      x?: number,
      y?: number,
      ...
    },
    arcClassName?: string,
    ...
  } & AbstractSeriesProps<ArcSeriesPoint>;

  declare export class ArcSeries extends AbstractSeries<ArcSeriesProps> {}
  declare export type LineMarkSeriesProps = {
    strokeStyle?: "dashed" | "solid",
    curve?: string | Function,
    getNull?: RVGetNull<LineMarkSeriesPoint>,
    lineStyle?: CSSProperties,
    markStyle?: CSSProperties,
    ...
  } & AbstractSeriesProps<LineMarkSeriesPoint>;

  declare export class LineMarkSeries
    extends AbstractSeries<LineMarkSeriesProps> {}
  declare export type LineMarkSeriesCanvasProps = {
    ...
  } & AbstractSeriesProps<LineMarkSeriesPoint>;

  declare export class LineMarkSeriesCanvas
    extends AbstractSeries<LineMarkSeriesCanvasProps> {}
  declare export type HintProps = {
    marginTop?: number;
    marginLeft?: number;
    innerWidth?: number;
    innerHeight?: number;
    scales?: {
      [key: string]: any,
      ...
    };
    value?: {
      [key: string]: any,
      ...
    };
    format?: Function;
    style?: CSSProperties;
    align?: {
      horizontal?: "auto" | "left" | "right" | "leftEdge" | "rightEdge",
      vertical?: "auto" | "bottom" | "top" | "bottomEdge" | "topEdge",
      ...
    };
    getAlignStyle?: RVGetAlignStyle;
    orientation?: "bottomleft" | "bottomright" | "topleft" | "topright";
  }
  declare export class Hint<T = any> extends Class<PureComponent<HintProps & T>> {}
  declare export type BordersProps = {
    style?: {
      bottom?: CSSProperties,
      left?: CSSProperties,
      right?: CSSProperties,
      top?: CSSProperties,
      ...
    };
    marginTop?: number;
    marginBottom?: number;
    marginLeft?: number;
    marginRight?: number;
    innerWidth?: number;
    innerHeight?: number;
  }
  declare export class Borders<T = any>
    extends Class<PureComponent<BordersProps & T>> {}
  declare export type CrosshairProps = {
    className?: string;
    values?: Array<any>;
    series?: {
      [key: string]: any,
      ...
    };
    innerWidth?: number;
    innerHeight?: number;
    marginLeft?: number;
    marginTop?: number;
    orientation?: "left" | "right";
    itemsFormat?: Function;
    titleFormat?: Function;
    style?: {
      line?: CSSProperties,
      title?: CSSProperties,
      box?: CSSProperties,
      ...
    };
  }
  declare export class Crosshair<T = any>
    extends Class<PureComponent<CrosshairProps & T>> {}
  declare export type XYPlotProps = {
    animation?:
      | string
      | {
          stiffness?: number,
          nonAnimatedProps?: Array<string>,
          damping?: number,
          ...
        }
      | boolean;
    className?: string;
    dontCheckIfEmpty?: boolean;
    height: number;
    margin?:
      | {
          left?: number,
          top?: number,
          right?: number,
          bottom?: number,
          ...
        }
      | number;
    onClick?: RVMouseEventHandler;
    onDoubleClick?: RVMouseEventHandler;
    onMouseDown?: RVMouseEventHandler;
    onMouseUp?: RVMouseEventHandler;
    onMouseEnter?: RVMouseEventHandler;
    onMouseLeave?: RVMouseEventHandler;
    onMouseMove?: RVMouseEventHandler;
    onTouchStart?: RVTouchEventHandler;
    onTouchMove?: RVTouchEventHandler;
    onTouchEnd?: RVTouchEventHandler;
    onTouchCancel?: RVTouchEventHandler;
    onWheel?: RVWheelEventHandler;
    stackBy?:
      | "x"
      | "y"
      | "radius"
      | "angle"
      | "color"
      | "fill"
      | "stroke"
      | "opacity"
      | "size";
    style?: CSSProperties;
    width: number;
  }
  declare export class XYPlot<T = any> extends Class<Component<XYPlotProps & T>> {}
  declare export type DecorativeAxisProps = {
    axisDomain: Array<number>,
    axisEnd: {
      x?: number | string,
      y?: number | string,
      ...
    },
    axisStart: {
      x?: number | string,
      y?: number | string,
      ...
    },
    numberOfTicks?: number,
    tickValue?: Function,
    tickSize?: number,
    ...
  } & AbstractSeriesProps<DecorativeAxisPoint>;

  declare export class DecorativeAxis
    extends AbstractSeries<DecorativeAxisProps> {}
  declare export type XAxisProps = {
    orientation?: "top" | "bottom";
    attr?: string;
    attrAxis?: string;
    width?: number;
    height?: number;
    top?: number;
    left?: number;
    title?: string;
    style?: CSSProperties;
    className?: string;
    hideTicks?: boolean;
    hideLine?: boolean;
    on0?: boolean;
    tickLabelAngle?: number;
    tickSize?: number;
    tickSizeInner?: number;
    tickSizeOuter?: number;
    tickPadding?: number;
    tickValues?: Array<any>;
    tickFormat?: RVTickFormat;
    tickTotal?: number;
    marginTop?: number;
    marginBottom?: number;
    marginLeft?: number;
    marginRight?: number;
    innerWidth?: number;
    innerHeight?: number;
  }
  declare export var XAxis: StatelessFunctionalComponent<XAxisProps>;
  declare export type YAxisProps = {
    orientation?: "left" | "right";
    attr?: string;
    attrAxis?: string;
    width?: number;
    height?: number;
    top?: number;
    left?: number;
    title?: string;
    style?: CSSProperties;
    className?: string;
    hideTicks?: boolean;
    hideLine?: boolean;
    on0?: boolean;
    tickLabelAngle?: number;
    tickSize?: number;
    tickSizeInner?: number;
    tickSizeOuter?: number;
    tickPadding?: number;
    tickValues?: Array<any>;
    tickFormat?: RVTickFormat;
    tickTotal?: number;
    marginTop?: number;
    marginBottom?: number;
    marginLeft?: number;
    marginRight?: number;
    innerWidth?: number;
    innerHeight?: number;
  }
  declare export var YAxis: StatelessFunctionalComponent<YAxisProps>;
  declare export type CircularGridLinesProps = {
    centerX?: number;
    centerY?: number;
    width?: number;
    height?: number;
    top?: number;
    left?: number;
    rRange?: Array<number>;
    style?: CSSProperties;
    tickValues?: Array<number>;
    tickTotal?: number;
    animation?:
      | string
      | {
          stiffness?: number,
          nonAnimatedProps?: Array<string>,
          damping?: number,
          ...
        }
      | boolean;
    marginTop?: number;
    marginBottom?: number;
    marginLeft?: number;
    marginRight?: number;
    innerWidth?: number;
    innerHeight?: number;
  }
  declare export class CircularGridLines<T = any>
    extends Class<PureComponent<CircularGridLinesProps & T>> {}
  declare export type GridLinesProps = {
    direction?: "vertical" | "horizontal";
    attr: string;
    width?: number;
    height?: number;
    top?: number;
    left?: number;
    style?: CSSProperties;
    tickValues?: Array<any>;
    tickTotal?: number;
    animation?:
      | string
      | {
          stiffness?: number,
          nonAnimatedProps?: Array<string>,
          damping?: number,
          ...
        }
      | boolean;
    marginTop?: number;
    marginBottom?: number;
    marginLeft?: number;
    marginRight?: number;
    innerWidth?: number;
    innerHeight?: number;
  }
  declare export class GridLines<T = any>
    extends Class<PureComponent<GridLinesProps & T>> {}
  declare export type GradientDefsProps = {
    className?: string;
  }
  declare export class GradientDefs<T = any>
    extends Class<PureComponent<GradientDefsProps & T>> {}
  declare export type VerticalGridLinesProps = {
    direction?: "vertical";
    attr?: string;
    width?: number;
    height?: number;
    top?: number;
    left?: number;
    style?: CSSProperties;
    tickValues?: Array<any>;
    tickTotal?: number;
    animation?:
      | string
      | {
          stiffness?: number,
          nonAnimatedProps?: Array<string>,
          damping?: number,
          ...
        }
      | boolean;
    marginTop?: number;
    marginBottom?: number;
    marginLeft?: number;
    marginRight?: number;
    innerWidth?: number;
    innerHeight?: number;
  }
  declare export var VerticalGridLines: StatelessFunctionalComponent<VerticalGridLinesProps>;
  declare export type HorizontalGridLinesProps = {
    direction?: "horizontal";
    attr?: string;
    width?: number;
    height?: number;
    top?: number;
    left?: number;
    style?: CSSProperties;
    tickValues?: Array<any>;
    tickTotal?: number;
    animation?:
      | string
      | {
          stiffness?: number,
          nonAnimatedProps?: Array<string>,
          damping?: number,
          ...
        }
      | boolean;
    marginTop?: number;
    marginBottom?: number;
    marginLeft?: number;
    marginRight?: number;
    innerWidth?: number;
    innerHeight?: number;
  }
  declare export var HorizontalGridLines: StatelessFunctionalComponent<HorizontalGridLinesProps>;
  declare export type VoronoiProps = {
    className?: string;
    extent: Array<Array<number>>;
    nodes: Array<VoronoiPoint>;
    onBlur?: Function;
    onClick?: RVMouseEventHandler;
    onHover?: Function;
    onMouseDown?: RVMouseEventHandler;
    onMouseUp?: RVMouseEventHandler;
    x?: Function;
    y?: Function;
  }
  declare export var Voronoi: StatelessFunctionalComponent<VoronoiProps>;
  declare export type DiscreteColorLegendProps = {
    className?: string;
    items: Array<
      | {
          title: string,
          color?: string,
          disabled?: boolean,
          ...
        }
      | string
      | ReactChild
    >;
    onItemClick?: RVMouseEventHandler;
    onItemMouseEnter?: RVItemEventHandler;
    onItemMouseLeave?: RVItemEventHandler;
    height?: number;
    width?: number;
    orientation?: "vertical" | "horizontal";
  }
  declare export var DiscreteColorLegend: StatelessFunctionalComponent<DiscreteColorLegendProps>;
  declare export type SearchableDiscreteColorLegendProps = {
    className?: string;
    items: Array<
      | {
          title: string,
          color?: string,
          disabled?: boolean,
          ...
        }
      | string
      | ReactChild
    >;
    onItemClick?: RVMouseEventHandler;
    onItemMouseEnter?: RVItemEventHandler;
    onItemMouseLeave?: RVItemEventHandler;
    height?: number;
    width?: number;
    orientation?: "vertical" | "horizontal";
    searchText?: string;
    onSearchChange?: Function;
    searchPlaceholder?: string;
    searchFn?: Function;
  }
  declare export var SearchableDiscreteColorLegend: StatelessFunctionalComponent<SearchableDiscreteColorLegendProps>;
  declare export type ContinuousColorLegendProps = {
    className?: string;
    height?: number;
    endColor?: string;
    endTitle: number | string;
    midColor?: string;
    midTitle?: number | string;
    startColor?: string;
    startTitle: number | string;
    width?: number;
  }
  declare export var ContinuousColorLegend: StatelessFunctionalComponent<ContinuousColorLegendProps>;
  declare export type ContinuousSizeLegendProps = {
    className?: string;
    circlesTotal?: number;
    endSize?: number;
    endTitle: number | string;
    height?: number;
    startSize?: number;
    startTitle: number | string;
    width?: number;
  }
  declare export var ContinuousSizeLegend: StatelessFunctionalComponent<ContinuousSizeLegendProps>;
  declare export type TreemapProps = {
    animation?:
      | string
      | {
          stiffness?: number,
          nonAnimatedProps?: Array<string>,
          damping?: number,
          ...
        }
      | boolean;
    className?: string;
    data?: TreemapPoint;
    height: number;
    hideRootNode?: boolean;
    margin?:
      | {
          left?: number,
          top?: number,
          right?: number,
          bottom?: number,
          ...
        }
      | number;
    mode?:
      | "squarify"
      | "resquarify"
      | "slice"
      | "dice"
      | "slicedice"
      | "binary"
      | "circlePack"
      | "partition"
      | "partition-pivot";
    onLeafClick?: RVValueEventHandler<TreemapPoint>;
    onLeafMouseOver?: RVValueEventHandler<TreemapPoint>;
    onLeafMouseOut?: RVValueEventHandler<TreemapPoint>;
    useCirclePacking?: boolean;
    padding?: number;
    sortFunction?: Function;
    width: number;
    getSize?: RVGet<TreemapPoint, "size">;
    getColor?: RVGet<TreemapPoint, "color">;
  }
  declare export class Treemap<T = any> extends Class<Component<TreemapProps & T>> {}
  declare export type RadialChartProps = {
    animation?:
      | string
      | {
          stiffness?: number,
          nonAnimatedProps?: Array<string>,
          damping?: number,
          ...
        }
      | boolean;
    className?: string;
    colorType?: string;
    data: Array<{
      angle?: number,
      className?: string,
      label?: string,
      radius?: number,
      style?: CSSProperties,
      ...
    }>;
    getAngle?: RVGet<RadialChartPoint, "angle">;
    getAngle0?: RVGet<RadialChartPoint, "angle0">;
    getRadius?: RVGet<RadialChartPoint, "radius">;
    getRadius0?: RVGet<RadialChartPoint, "radius0">;
    getLabel?: RVGet<RadialChartPoint, "label">;
    height: number;
    labelsAboveChildren?: boolean;
    labelsStyle?: CSSProperties;
    margin?:
      | {
          left?: number,
          top?: number,
          right?: number,
          bottom?: number,
          ...
        }
      | number;
    onValueClick?: RVValueEventHandler<RadialChartPoint>;
    onValueMouseOver?: RVValueEventHandler<RadialChartPoint>;
    onValueMouseOut?: RVValueEventHandler<RadialChartPoint>;
    showLabels?: boolean;
    style?: CSSProperties;
    subLabel?: Function;
    width: number;
  }
  declare export class RadialChart<T = any>
    extends Class<Component<RadialChartProps & T>> {}
  declare export type RadarChartProps = {
    animation?:
      | string
      | {
          stiffness?: number,
          nonAnimatedProps?: Array<string>,
          damping?: number,
          ...
        }
      | boolean;
    className?: string;
    colorType?: string;
    colorRange?: Array<string>;
    data: Array<RadarChartPoint>;
    domains: Array<{
      name: string,
      domain: Array<number>,
      tickFormat?: RVTickFormat,
      ...
    }>;
    height: number;
    hideInnerMostValues?: boolean;
    margin?:
      | {
          left?: number,
          top?: number,
          right?: number,
          bottom?: number,
          ...
        }
      | number;
    startingAngle?: number;
    style?: {
      axes?: CSSProperties,
      labels?: CSSProperties,
      polygons?: CSSProperties,
      ...
    };
    tickFormat?: RVTickFormat;
    width: number;
  }
  declare export class RadarChart<T = any>
    extends Class<Component<RadarChartProps & T>> {}
  declare export type ParallelCoordinatesProps = {
    animation?:
      | string
      | {
          stiffness?: number,
          nonAnimatedProps?: Array<string>,
          damping?: number,
          ...
        }
      | boolean;
    className?: string;
    colorType?: string;
    colorRange?: Array<string>;
    data: Array<ParallelCoordinatesPoint>;
    domains: Array<{
      name: string,
      domain: Array<number>,
      tickFormat?: RVTickFormat,
      ...
    }>;
    height: number;
    margin?:
      | {
          left?: number,
          top?: number,
          right?: number,
          bottom?: number,
          ...
        }
      | number;
    style?: {
      axes?: CSSProperties,
      labels?: CSSProperties,
      lines?: CSSProperties,
      ...
    };
    showMarks?: boolean;
    tickFormat?: RVTickFormat;
    width: number;
  }
  declare export class ParallelCoordinates<T = any>
    extends Class<Component<ParallelCoordinatesProps & T>> {}
  declare export type SankeyProps = {
    align?: "justify" | "left" | "right" | "center";
    className?: string;
    hasVoronoi?: boolean;
    height: number;
    hideLabels?: boolean;
    layout?: number;
    links: Array<{
      source:
        | number
        | {
            [key: string]: any,
            ...
          },
      target:
        | number
        | {
            [key: string]: any,
            ...
          },
      ...
    }>;
    margin?:
      | {
          left?: number,
          top?: number,
          right?: number,
          bottom?: number,
          ...
        }
      | number;
    nodePadding?: number;
    nodes: Array<SankeyPoint>;
    nodeWidth?: number;
    onValueMouseOver?: RVValueEventHandler<SankeyPoint>;
    onValueClick?: RVValueEventHandler<SankeyPoint>;
    onValueMouseOut?: RVValueEventHandler<SankeyPoint>;
    onLinkClick?: RVValueEventHandler<SankeyPoint>;
    onLinkMouseOver?: RVValueEventHandler<SankeyPoint>;
    onLinkMouseOut?: RVValueEventHandler<SankeyPoint>;
    style?: {
      links?: CSSProperties,
      rects?: CSSProperties,
      labels?: CSSProperties,
      ...
    };
    width: number;
  }
  declare export class Sankey<T = any> extends Class<Component<SankeyProps & T>> {}
  declare export type SunburstProps = {
    animation?:
      | string
      | {
          stiffness?: number,
          nonAnimatedProps?: Array<string>,
          damping?: number,
          ...
        }
      | boolean;
    getAngle?: RVGet<SunburstPoint, "angle">;
    getAngle0?: RVGet<SunburstPoint, "angle0">;
    className?: string;
    colorType?: string;
    data: SunburstPoint;
    height: number;
    hideRootNode?: boolean;
    getLabel?: RVGet<SunburstPoint, "label">;
    onValueClick?: RVValueEventHandler<SunburstPoint>;
    onValueMouseOver?: RVValueEventHandler<SunburstPoint>;
    onValueMouseOut?: RVValueEventHandler<SunburstPoint>;
    getSize?: RVGet<SunburstPoint, "size">;
    width: number;
  }
  declare export class Sunburst<T = any> extends Class<Component<SunburstProps & T>> {}
  declare export type FlexibleXYPlotProps = {
    animation?:
      | string
      | {
          stiffness?: number,
          nonAnimatedProps?: Array<string>,
          damping?: number,
          ...
        }
      | boolean;
    className?: string;
    dontCheckIfEmpty?: boolean;
    margin?:
      | {
          left?: number,
          top?: number,
          right?: number,
          bottom?: number,
          ...
        }
      | number;
    onClick?: RVMouseEventHandler;
    onDoubleClick?: RVMouseEventHandler;
    onMouseDown?: RVMouseEventHandler;
    onMouseUp?: RVMouseEventHandler;
    onMouseEnter?: RVMouseEventHandler;
    onMouseLeave?: RVMouseEventHandler;
    onMouseMove?: RVMouseEventHandler;
    onTouchStart?: RVTouchEventHandler;
    onTouchMove?: RVTouchEventHandler;
    onTouchEnd?: RVTouchEventHandler;
    onTouchCancel?: RVTouchEventHandler;
    onWheel?: RVWheelEventHandler;
    stackBy?:
      | "x"
      | "y"
      | "radius"
      | "angle"
      | "color"
      | "fill"
      | "stroke"
      | "opacity"
      | "size";
    style?: CSSProperties;
  }
  declare export class FlexibleXYPlot<T = any>
    extends Class<Component<FlexibleXYPlotProps & T>> {}
  declare export type FlexibleWidthXYPlotProps = {
    animation?:
      | string
      | {
          stiffness?: number,
          nonAnimatedProps?: Array<string>,
          damping?: number,
          ...
        }
      | boolean;
    className?: string;
    dontCheckIfEmpty?: boolean;
    margin?:
      | {
          left?: number,
          top?: number,
          right?: number,
          bottom?: number,
          ...
        }
      | number;
    onClick?: RVMouseEventHandler;
    onDoubleClick?: RVMouseEventHandler;
    onMouseDown?: RVMouseEventHandler;
    onMouseUp?: RVMouseEventHandler;
    onMouseEnter?: RVMouseEventHandler;
    onMouseLeave?: RVMouseEventHandler;
    onMouseMove?: RVMouseEventHandler;
    onTouchStart?: RVTouchEventHandler;
    onTouchMove?: RVTouchEventHandler;
    onTouchEnd?: RVTouchEventHandler;
    onTouchCancel?: RVTouchEventHandler;
    onWheel?: RVWheelEventHandler;
    stackBy?:
      | "x"
      | "y"
      | "radius"
      | "angle"
      | "color"
      | "fill"
      | "stroke"
      | "opacity"
      | "size";
    style?: CSSProperties;
  }
  declare export class FlexibleWidthXYPlot<T = any>
    extends Class<Component<FlexibleWidthXYPlotProps & T>> {}
  declare export type FlexibleHeightXYPlotProps = {
    animation?:
      | string
      | {
          stiffness?: number,
          nonAnimatedProps?: Array<string>,
          damping?: number,
          ...
        }
      | boolean;
    className?: string;
    dontCheckIfEmpty?: boolean;
    margin?:
      | {
          left?: number,
          top?: number,
          right?: number,
          bottom?: number,
          ...
        }
      | number;
    onClick?: RVMouseEventHandler;
    onDoubleClick?: RVMouseEventHandler;
    onMouseDown?: RVMouseEventHandler;
    onMouseUp?: RVMouseEventHandler;
    onMouseEnter?: RVMouseEventHandler;
    onMouseLeave?: RVMouseEventHandler;
    onMouseMove?: RVMouseEventHandler;
    onTouchStart?: RVTouchEventHandler;
    onTouchMove?: RVTouchEventHandler;
    onTouchEnd?: RVTouchEventHandler;
    onTouchCancel?: RVTouchEventHandler;
    onWheel?: RVWheelEventHandler;
    stackBy?:
      | "x"
      | "y"
      | "radius"
      | "angle"
      | "color"
      | "fill"
      | "stroke"
      | "opacity"
      | "size";
    style?: CSSProperties;
  }
  declare export class FlexibleHeightXYPlot<T = any>
    extends Class<Component<FlexibleHeightXYPlotProps & T>> {}
  declare export var makeHeightFlexible: (component?: any) => any;
  declare export var makeVisFlexible: (component?: any) => any;
  declare export var makeWidthFlexible: (component?: any) => any;
  declare export var AxisUtils: {
    DIRECTION: {
      VERTICAL: "vertical",
      HORIZONTAL: "horizontal",
      ...
    },
    ORIENTATION: {
      TOP: "top",
      LEFT: "left",
      RIGHT: "right",
      BOTTOM: "bottom",
      VERTICAL: "vertical",
      HORIZONTAL: "horizontal",
      ...
    },
    getTicksTotalFromSize: (size?: any) => any,
    getTickValues: (scale?: any, tickTotal?: any, tickValues?: any) => any,
    ...
  };
  declare export var ScaleUtils: {
    extractScalePropsFromProps: (props?: any, attributes?: any) => any,
    getAttributeScale: (props?: any, attr?: any) => any,
    getAttributeFunctor: (props?: any, attr?: any) => any,
    getAttr0Functor: (props?: any, attr?: any) => any,
    getAttributeValue: (props?: any, attr?: any) => any,
    getDomainByAccessor: (
      allData?: any,
      accessor?: any,
      accessor0?: any,
      type?: any
    ) => any,
    getFontColorFromBackground: (background?: any) => any,
    getMissingScaleProps: (props?: any, data?: any, attributes?: any) => any,
    getOptionalScaleProps: (props?: any) => any,
    getScaleObjectFromProps: (props?: any, attr?: any) => any,
    getScalePropTypesByAttribute: (attr?: any) => any,
    getXYPlotValues: (props?: any, children?: any) => any,
    literalScale: (defaultValue?: any) => any,
    ...
  };
}

declare module "react-vis/es/plot/series/abstract-series" {
  import typeof { AbstractSeries } from "react-vis";

  declare export default AbstractSeries;
}

declare module "react-vis/es/plot/series/line-series" {
  import typeof { LineSeries } from "react-vis";

  declare export default LineSeries;
}

declare module "react-vis/es/plot/series/line-series-canvas" {
  import typeof { LineSeriesCanvas } from "react-vis";

  declare export default LineSeriesCanvas;
}

declare module "react-vis/es/plot/series/horizontal-bar-series" {
  import typeof { HorizontalBarSeries } from "react-vis";

  declare export default HorizontalBarSeries;
}

declare module "react-vis/es/plot/series/horizontal-bar-series-canvas" {
  import typeof { HorizontalBarSeriesCanvas } from "react-vis";

  declare export default HorizontalBarSeriesCanvas;
}

declare module "react-vis/es/plot/series/vertical-bar-series" {
  import typeof { VerticalBarSeries } from "react-vis";

  declare export default VerticalBarSeries;
}

declare module "react-vis/es/plot/series/vertical-bar-series-canvas" {
  import typeof { VerticalBarSeriesCanvas } from "react-vis";

  declare export default VerticalBarSeriesCanvas;
}

declare module "react-vis/es/plot/series/vertical-rect-series" {
  import typeof { VerticalRectSeries } from "react-vis";

  declare export default VerticalRectSeries;
}

declare module "react-vis/es/plot/series/vertical-rect-series-canvas" {
  import typeof { VerticalRectSeriesCanvas } from "react-vis";

  declare export default VerticalRectSeriesCanvas;
}

declare module "react-vis/es/plot/series/horizontal-rect-series" {
  import typeof { HorizontalRectSeries } from "react-vis";

  declare export default HorizontalRectSeries;
}

declare module "react-vis/es/plot/series/horizontal-rect-series-canvas" {
  import typeof { HorizontalRectSeriesCanvas } from "react-vis";

  declare export default HorizontalRectSeriesCanvas;
}

declare module "react-vis/es/plot/series/label-series" {
  import typeof { LabelSeries } from "react-vis";

  declare export default LabelSeries;
}

declare module "react-vis/es/plot/series/polygon-series" {
  import typeof { PolygonSeries } from "react-vis";

  declare export default PolygonSeries;
}

declare module "react-vis/es/plot/series/rect-series" {
  import typeof { RectSeries } from "react-vis";

  declare export default RectSeries;
}

declare module "react-vis/es/plot/series/rect-series-canvas" {
  import typeof { RectSeriesCanvas } from "react-vis";

  declare export default RectSeriesCanvas;
}

declare module "react-vis/es/plot/series/mark-series" {
  import typeof { MarkSeries } from "react-vis";

  declare export default MarkSeries;
}

declare module "react-vis/es/plot/series/mark-series-canvas" {
  import typeof { MarkSeriesCanvas } from "react-vis";

  declare export default MarkSeriesCanvas;
}

declare module "react-vis/es/plot/series/whisker-series" {
  import typeof { WhiskerSeries } from "react-vis";

  declare export default WhiskerSeries;
}

declare module "react-vis/es/plot/series/heatmap-series" {
  import typeof { HeatmapSeries } from "react-vis";

  declare export default HeatmapSeries;
}

declare module "react-vis/es/plot/series/contour-series" {
  import typeof { ContourSeries } from "react-vis";

  declare export default ContourSeries;
}

declare module "react-vis/es/plot/series/custom-svg-series" {
  import typeof { CustomSVGSeries } from "react-vis";

  declare export default CustomSVGSeries;
}

declare module "react-vis/es/plot/series/area-series" {
  import typeof { AreaSeries } from "react-vis";

  declare export default AreaSeries;
}

declare module "react-vis/es/plot/series/arc-series" {
  import typeof { ArcSeries } from "react-vis";

  declare export default ArcSeries;
}

declare module "react-vis/es/plot/series/line-mark-series" {
  import typeof { LineMarkSeries } from "react-vis";

  declare export default LineMarkSeries;
}

declare module "react-vis/es/plot/series/line-mark-series-canvas" {
  import typeof { LineMarkSeriesCanvas } from "react-vis";

  declare export default LineMarkSeriesCanvas;
}

declare module "react-vis/es/plot/hint" {
  import typeof { Hint } from "react-vis";

  declare export default Hint;
}

declare module "react-vis/es/plot/borders" {
  import typeof { Borders } from "react-vis";

  declare export default Borders;
}

declare module "react-vis/es/plot/crosshair" {
  import typeof { Crosshair } from "react-vis";

  declare export default Crosshair;
}

declare module "react-vis/es/plot/xy-plot" {
  import typeof { XYPlot } from "react-vis";

  declare export default XYPlot;
}

declare module "react-vis/es/plot/axis/decorative-axis" {
  import typeof { DecorativeAxis } from "react-vis";

  declare export default DecorativeAxis;
}

declare module "react-vis/es/plot/axis/x-axis" {
  import typeof { XAxis } from "react-vis";

  declare export default XAxis;
}

declare module "react-vis/es/plot/axis/y-axis" {
  import typeof { YAxis } from "react-vis";

  declare export default YAxis;
}

declare module "react-vis/es/plot/circular-grid-lines" {
  import typeof { CircularGridLines } from "react-vis";

  declare export default CircularGridLines;
}

declare module "react-vis/es/plot/grid-lines" {
  import typeof { GridLines } from "react-vis";

  declare export default GridLines;
}

declare module "react-vis/es/plot/gradient-defs" {
  import typeof { GradientDefs } from "react-vis";

  declare export default GradientDefs;
}

declare module "react-vis/es/plot/vertical-grid-lines" {
  import typeof { VerticalGridLines } from "react-vis";

  declare export default VerticalGridLines;
}

declare module "react-vis/es/plot/horizontal-grid-lines" {
  import typeof { HorizontalGridLines } from "react-vis";

  declare export default HorizontalGridLines;
}

declare module "react-vis/es/plot/voronoi" {
  import typeof { Voronoi } from "react-vis";

  declare export default Voronoi;
}

declare module "react-vis/es/legends/discrete-color-legend" {
  import typeof { DiscreteColorLegend } from "react-vis";

  declare export default DiscreteColorLegend;
}

declare module "react-vis/es/legends/searchable-discrete-color-legend" {
  import typeof { SearchableDiscreteColorLegend } from "react-vis";

  declare export default SearchableDiscreteColorLegend;
}

declare module "react-vis/es/legends/continuous-color-legend" {
  import typeof { ContinuousColorLegend } from "react-vis";

  declare export default ContinuousColorLegend;
}

declare module "react-vis/es/legends/continuous-size-legend" {
  import typeof { ContinuousSizeLegend } from "react-vis";

  declare export default ContinuousSizeLegend;
}

declare module "react-vis/es/treemap" {
  import typeof { Treemap } from "react-vis";

  declare export default Treemap;
}

declare module "react-vis/es/radial-chart" {
  import typeof { RadialChart } from "react-vis";

  declare export default RadialChart;
}

declare module "react-vis/es/radar-chart" {
  import typeof { RadarChart } from "react-vis";

  declare export default RadarChart;
}

declare module "react-vis/es/parallel-coordinates" {
  import typeof { ParallelCoordinates } from "react-vis";

  declare export default ParallelCoordinates;
}

declare module "react-vis/es/sankey" {
  import typeof { Sankey } from "react-vis";

  declare export default Sankey;
}

declare module "react-vis/es/sunburst" {
  import typeof { Sunburst } from "react-vis";

  declare export default Sunburst;
}

declare module "react-vis/es/utils/axis-utils" {
  import typeof { AxisUtils } from "react-vis";

  declare export default AxisUtils;
}

declare module "react-vis/es/utils/scales-utils" {
  import typeof { ScaleUtils } from "react-vis";

  declare export default ScaleUtils;
}

declare module "react-vis/es/make-vis-flexible" {
  declare export {
    makeHeightFlexible,
    makeVisFlexible,
    makeWidthFlexible,
    FlexibleXYPlot,
    FlexibleWidthXYPlot,
    FlexibleHeightXYPlot,
  } from "react-vis";
}
